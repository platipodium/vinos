; SPDX-FileCopyrightText: 2022-2023 Helmholtz-Zentrum hereon GmbH (hereon)
; SPDX-License-Identifier: Apache-2.0
; SPDX-FileContributor: Carsten Lemmen <carsten.lemmen@hereon.de>

; Simple calendar implementation
; Reset the calendar to a default date
; @todo replace the functinoality with the time extension

extensions [ time ]

globals [
  date ; a logotime object representing absolute date
]

to setup-calendar
  set days-in-months (list 31 28 31 30 31 30 31 31 30 31 30 31 )

  ; date-and-time gives a locale-dependent and JVM precision-dependent
  ; output.  The YMD is the last part of the string in format
  ; dd-MMM-yyyy  (MMM as a localized three-letter string)
  let _now date-and-time
  let _len length _now
  let _ymd substring _now (_len - 11) _len

  ; Use the time exension to read from this formatted string into
  ; a logotime object and extract the numeric YMD info
  set date time:create-with-format _ymd "dd-MMM-yyyy"

  ; Now add to the current time the offset
  set date time:plus date time-offset "months"

  ; Convert back to string and then integers
  ;set _ymd time:show _logotime "yyyy-MM-dd"
  ;set year read-from-string substring _ymd 0 4
  ;set month read-from-string  substring _ymd 5 7
  ;set day read-from-string  substring _ymd 8 10

  set year time:get "year" date
  set month time:get "month" date
  set day time:get "day"	date
  set day-of-year time:get "dayofyear" date

end

; Advance the calendar by one day
to advance-calendar

  set date time:plus date 1 "days"

  set year time:get "year" date
  set month time:get "month" date
  set day time:get "day"	date
  set day-of-year time:get "dayofyear" date

end

to-report datetime
  report (word weekday-name " " year "-" month "-" day " (" day-of-year ")")
end

to-report datetime-short
  report (word (formatted-int year 4) (formatted-int month 2) (formatted-int day 2))
end

; Use Zeller's algorithm to calculate the weekday
; Return from 0 (Sunday) to 6 (Saturday)
to-report weekday
  let y0 int (year - (14 - month) / 12)
  let x int (y0 + y0 / 4 - y0 / 100 + y0 / 400)
  let m0 int (month + 12 * ((14 - month) / 12) - 2)
  let d0 (day + x + (31 * m0) / 12) mod 7
  report d0
end

to-report weekday-name
  let _weekday-names (list "Sun" "Mon" "Tue" "Wed" "Thu" "Fri" "Sat")
  report item weekday _weekday-names
end
