; SPDX-FileCopyrightText: 2023 Helmholtz-Zentrum hereon GmbH (Hereon)
; SPDX-License-Identifier: Apache-2.0
; Author: Carsten Lemmen <carsten.lemmen@hereon.de>
;
; This file contains utilities that are independent of the code around ("pure")
; 

; To get the typical five number summary (0%, 25%, 50%, 75%, 100% quartiles)
to-report five-number-summary [numbers]
  let sorted-numbers sort numbers
  let median-number median sorted-numbers
  report (list    min sorted-numbers
                  median filter [ i -> i < median-number + 1] sorted-numbers 
                  median-number 
                  median filter [ i -> i > median-number - 1] sorted-numbers 
                  max sorted-numbers
    )
end

to-report __test_five-number-summary   
  report five-number-summary range 101  = (list 0 25 50 75 100)
end

to-report gis-envelope-distance [agent-set]
  report haversine-distance  (gis:envelope-of agent-set)
end
  
to-report haversine-distance [coordinates]
  ; NetLogo angles are in degree
  let lon1 item 0 coordinates
  let lon2 item 1 coordinates
  let lat1 item 2 coordinates
  let lat2 item 3 coordinates
  
  let earth-radius 6371
  let dlat (lat2 - lat1)
  let dlon (lon2 - lon1)
  let a (sin (dlat / 2) ^ 2) + (cos lat1) * (cos lat2 ) * (sin (dlon / 2) ^ 2)
  let c 2 * asin( sqrt(a) ) * pi / 180.0
  report earth-radius * c 
end

to-report __test_haversine-distance
  let d  haversine-distance (list 7.0 8.0 55.0 54.0)
  report (precision d 1) =  128.6
end

; Given a distribution mean stddev min max, draw a value from this
; by assuming normal mean+/-stdev distribution but within the 
; limits given by min/max
to-report value-from-distribution [x]
  
  if length x != 4 [
    user-message (word "Error: There are " length x " items in list " x ". Need exactly 4")
    report 0
  ]
  
  let value random-normal (item 0 x) (item 1 x)
  ifelse ( value >= (item 2 x) ) and ( value <= (item 3 x) ) [
    report value
  ][
    report value-from-distribution x
  ]
end

to-report __test-value-from-distribution  
  let distribution (list 10 5 8 12)
  let value value-from-distribution distribution 
  ifelse ( value < item 2 distribution or value > item 3 distribution) [
    report false ][ report true
  ]
end


to-report normalize [data]
  let min-data min data
  let max-data max data
  report data ;map [ (item - min-data) / (max-data - min-data) ] data
end

to-report __test-normalize
  let distribution (list 10 3 4 0)
  report normalize distribution = (list 1 0.3 0.4 0)
end

to-report quantile-scale [indices data]
  
  let n length indices - 1
    
  let my-list n-values n [ j -> 
     map [ x -> 0.5 / n + j / n ] (filter [ i ->  ( i >= item j indices ) and (i < item (j + 1) indices)  ] sort data)
  ]   
  report reduce [[x  y] -> (sentence x y) ]  my-list
end

to-report quantile-indices [data n]
  let sorted sort data
  let data-min first data
  let data-max last data
  let indices n-values (n - 1) [ i -> round ( length data * (i + 1) / n) ]
  set indices lput (length data - 1) (fput 0 indices)
  report indices 
end

to-report quantile-thresholds [data n]
  let sorted sort data
  let data-min first data
  let data-max last data
  let indices n-values (n - 1) [ i -> round ( length data * (i + 1) / n) ]
  set indices lput (length data - 1) (fput 0 indices)
  report  map [ i -> item i sorted ] indices
end

to-report __test-quantile-thresholds
  let distribution (list 10 3 4 6 2 2 3 4 7 9 2 1)
  let qi quantile-indices distribution 4
  let qv quantile-thresholds distribution 4
  ; not working yet 
  report true
end

to-report __test-quantile-thresholds-number
  let distribution (list 10 3 4 6 2 2 3 4 7 9 2 1)
  ; show quantile-indices distribution 4
  ;show quantile-thresholds distribution 4
  ; @todo not working yet
  report true
end

to-report quantiles [data n]
  let indices quantile-indices data n
  
  report quantile-scale indices data
  ;let my-list n-values n [ j -> 
  ;  map [ x -> 0.5 / n + j / n ] (filter [ i ->  ( i >= item j indices ) and (i < item (j + 1) indices)  ] sort data)
  ;]
    
  ;report reduce [[x  y] -> (sentence x y) ]  my-list
end

to-report __test-quantiles
  let distribution (list 10 3 4 6 2 2 3 4 7 9 2 1)
  report quantiles distribution 4 = [0.125 0.125 0.125 0.125 0.375 0.375 0.375 0.375 0.625 0.625 0.875 0.875]
end

