; SPDX-FileCopyrightText: 2023 Helmholtz-Zentrum hereon GmbH
; SPDX-License-Identifier: Apache-2.0
; Author: Carsten Lemmen <carsten.lemmen@hereon.de>
;
; This file contains utilities that are independent of the code around ("pure")
;

; To get the typical five number summary (0%, 25%, 50%, 75%, 100% quartiles)
to-report five-number-summary [numbers]
  let sorted-numbers sort numbers
  let median-number median sorted-numbers
  report (list    min sorted-numbers
                  median filter [ i -> i < median-number + 1] sorted-numbers
                  median-number
                  median filter [ i -> i > median-number - 1] sorted-numbers
                  max sorted-numbers
    )
end

to-report __test_five-number-summary
  report five-number-summary range 101  = (list 0 25 50 75 100)
end

to-report gis-envelope-distance [agent-set]
  report haversine-distance  (gis:envelope-of agent-set)
end

to-report haversine-distance [coordinates]
  ; NetLogo angles are in degree
  let lon1 item 0 coordinates
  let lon2 item 1 coordinates
  let lat1 item 2 coordinates
  let lat2 item 3 coordinates

  let earth-radius 6371
  let dlat (lat2 - lat1)
  let dlon (lon2 - lon1)
  let a (sin (dlat / 2) ^ 2) + (cos lat1) * (cos lat2 ) * (sin (dlon / 2) ^ 2)
  let c 2 * asin( sqrt(a) ) * pi / 180.0
  report earth-radius * c
end

to-report __test_haversine-distance
  let d  haversine-distance (list 7.0 8.0 55.0 54.0)
  report (precision d 1) =  128.6
end

; Given a distribution mean stddev min max, draw a value from this
; by assuming normal mean+/-stdev distribution but within the
; limits given by min/max
to-report value-from-distribution [x]

  if length x != 4 [
    user-message (word "Error: There are " length x " items in list " x ". Need exactly 4")
    report 0
  ]

  let value random-normal (item 0 x) (item 1 x)
  ifelse ( value >= (item 2 x) ) and ( value <= (item 3 x) ) [
    report value
  ][
    report value-from-distribution x
  ]
end

to-report __test-value-from-distribution
  let distribution (list 10 5 8 12)
  let value value-from-distribution distribution
  ifelse ( value < item 2 distribution or value > item 3 distribution) [
    report false ][ report true
  ]
end


to-report normalize [data]
  if length data < 2 [report data]
  let min-data min data
  let max-data max data
  if min-data = max-data [report data]
  report map [i -> (i - min-data) / (max-data - min-data) ] data
end

to-report __test-normalize
  let distribution (list 10 3 4 0)
  report normalize distribution = (list 1 0.3 0.4 0)
end

to-report quantile-scale [indices data]

  let n length indices - 1

  let my-list n-values n [ j ->
     map [ x -> 0.5 / n + j / n ] (filter [ i ->  ( i >= item j indices ) and (i < item (j + 1) indices)  ] sort data)
  ]
  report reduce [[x  y] -> (sentence x y) ]  my-list
end

to-report quantile-scale-new [indices data]

  if indices = nobody [report nobody]
  let n length indices - 1
  if length data < 1 [report nobody]

  let _missing int min data - 1
  let _data map [ x -> _missing ] data

  foreach range n [ j ->
    set _data (map [ [ x y ] ->
      ifelse-value (x >= item 0 indices and x < item (j + 1) indices and y = _missing) [ 0.5 / n + j / n ][ y ]
    ] data _data)
  ]

  ; Now for uppermost category the exceeding values
  set _data (map [ [ x y ] ->
    ifelse-value (x > last indices ) [ 0.5 / n + (n - 1) / n ][ y ]
  ] data _data)

  report _data
end

to-report quantile-indices [data n]
  let sorted sort data
  let data-min first data
  let data-max last data
  let indices n-values (n - 1) [ i -> round ( length data * (i + 1) / n) ]
  set indices lput (length data - 1) (fput 0 indices)
  report indices
end

to-report quantile-thresholds [data n]
  let sorted sort data
  if length sorted < (n + 1) or n < 1 [
    ;print (sentence "Error, the data is not diverse enough for" n "categories")
    report nobody
  ]
  let data-min first sorted
  let data-max last sorted
  let indices n-values (n - 1) [ i -> round ( length sorted * (i + 1) / n) ]
  set indices lput (length sorted - 1) (fput 0 indices)
  report  map [ i -> item i sorted ] indices
end

to-report __test-quantile-thresholds
  let distribution (list 10 3 4 6 2 2 3 4 7 9 2 1)
  let qi quantile-indices distribution 4
  let qv quantile-thresholds distribution 4
  ; not working yet
  report true
end

to-report __test-quantile-thresholds-number
  let distribution (list 10 3 4 6 2 2 3 4 7 9 2 1)
  ; show quantile-indices distribution 4
  ;show quantile-thresholds distribution 4
  ; @todo not working yet
  report true
end

to-report quantiles [data n]
  let indices quantile-indices data n

  report quantile-scale indices data
  ;let my-list n-values n [ j ->
  ;  map [ x -> 0.5 / n + j / n ] (filter [ i ->  ( i >= item j indices ) and (i < item (j + 1) indices)  ] sort data)
  ;]

  ;report reduce [[x  y] -> (sentence x y) ]  my-list
end

to-report __test-quantiles
  let distribution (list 10 3 4 6 2 2 3 4 7 9 2 1)
  report quantiles distribution 4 = [0.125 0.125 0.125 0.125 0.375 0.375 0.375 0.375 0.625 0.625 0.875 0.875]
end

to-report formatted-number [number n-significant]

  ; This does not work for negative numbers or zero as we use the log_10
  if number <= 0 [ report number ]
  let _order order number

  ; of the number is too large, it needs scientific notation.
  ; @todo this needs some checks on order > 9
  if (_order >= n-significant) [
    report (word int(number / (10 ^ int(_order - n-significant + 3) )) "E" int(_order - 1))
  ]
  ; for exactly fitting numbers or one less (trailing comma), nothing is done
  if (_order >= n-significant - 2) [
    report (word round(number))
  ]
  ; for mixed integer/floating numbers use precision to curtail
  if (_order > 0) [
    report (word precision number (n-significant - _order - 1))
  ]

  report (word int(number / (10 ^ int(_order - n-significant + 2) )) "e" int(2 - _order))

end

to-report __test-formatted-number
  let input (list 12345.6 1234.56  123.456 12.3456  1.23456 0.12345 0.01234)
  report true
end


to-report index-max-one-of [my-list]
  if empty? my-list [report nobody]
  report position ( max my-list ) my-list
end

to-report __test-index-max-one-of
  let my-list (list 1 3 5 7 9 8 6 5 5 5)
  report index-max-one-of my-list = 4
end


to-report boolean2int [x]
  ifelse x [report 1][report 0]
end

to-report  __test-boolean2int
  if boolean2int true  != 1 [ report false ]
  if boolean2int false != 0 [ report false ]
  report true
end

to  unit-test
  let tests (list  __test-boolean2int __test_csv_property __test-load-dataset
    __test_five-number-summary __test_haversine-distance __test-value-from-distribution
    __test-normalize __test-quantile-thresholds __test-quantile-thresholds-number
  __test-quantiles __test-formatted-number __test-index-max-one-of  __test-formatted-int
  __test-sign __test-order __test-split __test-position-one-of __test-replace-pattern
  __test-lower __test-leading-zero __test-romanize )
  foreach tests [
    t -> ifelse t [print (sentence "Test passed")][error  "Test failed"]
  ]
end

to-report starts-with [_list _char]
  while [is-list? _list] [set _list first _list]
  if not is-string? _list [report false]
  if not (first _list = _char) [report false]
  report true
end

to-report __test-starts-with
  if not starts-with "# abc" "#" [report false]
  if not starts-with  (list "#"  "bs" 4) "#" [report false]
  if not starts-with  (list "#b" "cd" "b") "#" [report false]
  report true
end


to-report formatted-int [_number _n]

  if _n < 1 [report ""]
  let _string ""
  let _position -1

  if _number > 0 [
    set _position _n - (log _number 10 )
  ]
  ifelse  _position < 0 [
    foreach range _n [ i -> set _string (word "*" _string) ]
    report _string
  ][
    foreach range (_position - 1) [ i -> set _string (word "0" _string) ]
  ]
  report (word _string _number)

end

to-report __test-formatted-int

  if formatted-int  23 4 != "0023" [report false]
  if formatted-int  23 1 != "*" [report false]
  if formatted-int -23 3 != "***" [report false]
  report true
end

to-report order [number]
  if number = 0 [report 0]
  let _log log abs number 10
  report int _log + sign _log
end

to-report __test-order
  if order 0 != 0 [report false]
  if order 2 != 1 [report false]
  if order 6.789 != 1 [report false]
  if order -6.57 != 1 [report false]
  if order 2019805 != 7 [report false]
  if order 0.12 != -1 [report false]
  report true
end

to-report sign [number]
  ifelse number < 0 [report -1][report 1]
end

to-report __test-sign
  if sign -0.1 != -1 [report false]
  if sign -0 != 1 [report false]
  if sign 100 != 1 [report false]
  report true
end

to-report gis-patch-area
  let _coordinates gis:envelope-of self
  let earth-radius 6371
  let _area 4 * pi * earth-radius * earth-radius
  let _dlon item 1 _coordinates - item 0 _coordinates
  let _dlat item 3 _coordinates - item 2 _coordinates
  let _clat (item 3 _coordinates + item 2 _coordinates) / 2.0

  report _area * _dlon / 360.0 * _dlat / 360.0 * cos _clat
end

; split a string along occurences of character char and return
; a list
to-report split [char string]

  if not is-string? string [ error (word string " is not a string") ]
  let _string string
  let _list (list)
  let _pos position-one-of char _string

  while [is-number? _pos] [
    set _list lput (substring _string 0 _pos) _list
    set _string (substring _string (_pos + 1) (length _string))
    if not is-string? _string [ error (word _string " is not a string") ]
    set _pos position-one-of char _string
  ]
  set _list lput _string _list
  report _list
end

to-report __test-split
  if split ";" "I;have;a;;dream" != (list "I" "have" "a" "" "dream") [report false]
  if split "!?." "I.have?a.!dream" != (list "I" "have" "a" "" "dream") [report false]
  report true
end

to-report position-one-of [_charlist _string]

  if not is-string? _string [ error (word _string " is not a string")]
  if is-string? _charlist [
    set _charlist map [ i -> item i _charlist] (range length _charlist)
  ]
  let _poslist map [ c -> position c _string ] _charlist
  set _poslist filter is-number? _poslist
  if empty? _poslist [report false]
  report min _poslist

end

to-report __test-position-one-of

  if (position-one-of "; ?!" "Hello? hi! ; said Fred") != 5 [report false]
  if (position-one-of ".X" "Hello? hi! ; said Fred") != false [report false]
  report true

end

to-report lower [string]
  let _lowercase ""
  let _upper "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  let _lower "abcdefghijklmnopqrstuvwxyz"

  foreach range length string [ i ->
    let _c item i string
    let _position position _c _upper
    ifelse ( is-number? _position) [
      set _lowercase (word _lowercase item _position _lower)
    ][
      set _lowercase (word _lowercase _c)
    ]
  ]
  report _lowercase
end

to-report __test-lower
  if lower "AlHam1Br!a" != "alham1br!a" [ report false ]
  report true
end


to-report replace-pattern [string pattern char]

  let _replaced ""

  foreach range length string [ i ->
    let _c item i string
    let _position position _c pattern
    ifelse ( is-number? _position) [
      set _replaced (word _replaced char)
    ][
      set _replaced (word _replaced _c)
    ]
  ]
  report _replaced
end

to-report __test-replace-pattern
  if replace-pattern "AlHam1Br!a"  "!1" "X" !=  "AlHamXBrXa" [ report false ]
  if replace-pattern "AlHam1Br!a"  "!1" "" != "AlHamBra" [ report false ]
  report true
end

to-report unique [_list]
  if not is-list? _list [set _list (list _list)]
  let _unique (list)
  foreach _list [ _member ->
    if not member? _member _unique [set _unique lput _member _unique ]
  ]
  report _unique
end

to-report __test-unique
  if unique 1 != (list 1) [report false]
  if unique [ 1 4 2 ] != (list 1 4 2)  [report false]
  if unique [ 1 1 4 1 1 2 4 1 2] != (list 1 4 2)  [report false]
  report true
end

to-report right-pad [_arg _n]
  if not is-string? _arg [ set _arg (word _arg)]
  let _length length _arg
  if _length > _n [ set _arg substring _arg 0 _n]
  if _length < _n [ repeat _n - _length [ set _arg (word _arg " ")]]
  report _arg
end

to-report __test-right-pad
  if right-pad "A" 4 != "A   " [ report false ]
  if right-pad " A" 4 != " A  " [ report false ]
  if right-pad 12 4 != "12  " [ report false]
  if right-pad 12345 4 != "1234" [ report false]
  report true
end

to-report leading-zero [_int _n]
  set _int int _int
  while [length (word _int) < _n] [ set _int (word "0" _int)]
  report (word _int)
end

to-report  __test-leading-zero
  let _i 35.64
  if leading-zero _i 1 != "35"  [report false]
  if leading-zero _i 2 != "35"  [report false]
  if leading-zero _i 3 != "035"  [report false]
  if leading-zero _i 7 != "0000035"  [report false]
  report true
end

; Latinize a number
to-report romanize [_arabic]
  if not is-number? _arabic [report _arabic]

  let _values [1000 900 500 400 100 90 50 40 10 9 5 4 1]
  let _symbols ["M" "CM" "D" "CD" "C" "XC" "L" "XL" "X" "IX" "V" "IV" "I"]

  let _numeral ""
  let _remainder _arabic

  foreach _values [ v ->
    ; Repeat main numerals
    while [ _remainder >= v] [
      set _numeral (word _numeral (item position v _values _symbols))
      set _remainder _remainder - v
    ]
  ]

  report _numeral
end

to-report __test-romanize
  if romanize 1234 != "MCCXXXIV" [ report false ]
  if romanize 3949 != "MMMCMXLIX" [ report false ]
  report true
end
