; SPDX-FileCopyrightText: 2022-2023 Universität Hamburg (UHH)
; SPDX-FileCopyrightText: 2022-2023 Helmholtz-Zentrum hereon GmbH (Hereon)
; SPDX-FileCopyrightText: 2023 Hochschule Bremerhaven
; SPDX-License-Identifier: Apache-2.0
;
; SPDX-FileContributor: Carsten Lemmen <carsten.lemmen@hereon.de>
; SPDX-FileContributor: Sascha Hokamp <sascha.hokamp@uni-hamburg.de>
; SPDX-FileContributor: Jieun Seo <jieun.seo@studium.uni-hamburg.de>
; SPDX-FileContributor: Serra Örey <soerey@hs-bremerhaven.de>

extensions [csv]

breed [boats boat]

boats-own [
  boat-gear-catches              ; for each boat a vector of fish catches (per patch or tick)
  harvest-boat                 ; for each boat a vector of total harvest of the fish species
  catch-efficiency-boat        ; how much fish is effectively catched
  boat-capacity                ; size of the boat
  ;boat-engine-power                

  revenue-boat             ; revenue for the fishing trip of the boat
  costs-boat               ; costs for the fishing trip of the boat
  delta-gain-boat          ; change in gain
  gain-boat                ; gain for the fishing trip of the boat
  boat-delta-priorities      ; change in priority
  boat-gear-priorities            ; priority for the pathway
  priority-weighted-average  ; priority weighted average of gain

  fishing-speed            ; speed when fishing (replaced by gear-speed later on)
  boat-steaming-speed           ; speed when steaming

  ; @todo make into a vector for the species
  solea-catch-kg          ; catch of solea in kg for a fishing trip
  solea-catch-euro        ; catch of solea in EUR 2015 for a fishing trip
  platessa-catch-kg       ; catch of platessa in kg for a fishing trip
  platessa-catch-euro     ; catch of platessa in EUR 2015 for a fishing trip
  crangon-catch-kg        ; catch of crangon in kg for a fishing trip
  crangon-catch-euro      ; catch of crangon in EUR 2015 for a fishing trip
  other-catch-kg          ; other catch in kg for a fishing trip
  other-catch-euro        ; other catch in EUR 2015 for a fishing trip

  transportation-costs    ; costs for one km of the fishing trip, not known, work with a parameter
                          ; comment: mainly driven by oil price, approx 10-20 percent of the revenue for crangon, up to 30 percent for solea and platessa according to press relesease March 2022 going up to 50 percent
  operating-costs         ; cost for opertating the boat, not known, work with a parameter
                          ; comment: approximately 50 percent of the revenue
  target-species          ; species primarily tragetted (solea, platessa, crangon)

  boat-landing-port       ; favorite-landing-port (in the current state there is the one favorite port, which is the landing port)
  boat-home-port          ; Home Port (in the current state only German home ports are considered
  pathways                ; possible pathways which boats learn
  boat-gears              ; set of available gears on this boat
  boat-type               ; Number 1-4 of the named cluster
  boat-length             ; length of boat in m, related (yet unknown) to capacity.
  boat-engine             ; power of the engine in kW
 
  boat-max-distance
  boat-max-duration  ; cluster-dependent typical trip length
  
  boat-time-at-sea
  boat-time-at-sea-left
  boat-distance-at-sea
  
  ; value encoding the state the boat is in during a fishing trip.
  ; 0 in port not available, i.e. resting, refueling, grounded
  ; 1 in port and available
  ; 2 at start patch and ready to deploy gear
  ; 3 at sea and able to go further out
  ; 4 at sea, needing to go home
  ; 5 at landing patch, ready to offload
  boat-trip-phase 
  boat-needs-return?
  
  boat-hour ; Internal hour of the day to facility event-based scheduling
  
]


to setup-boats

  set-default-shape boats "boat top"
  
  ; read distribution of boat properties
  let lpue-distribution csv-property "LPUE"
  let engine-distribution csv-property "VE_KW"
  let distance-distribution csv-property "distance_to_port"
  let triplength-distribution csv-property "triplength"
  let length-distribution csv-property "VE_LEN"
  let hours-distribution csv-property "total_fishinghours"
  
  ; @todo get th fishing speed from gear-speed
  let fishing-speed-mean 5.556 ; unit is km/h (= 3kn)
  let fishing-speed-sdev 0.926 ; unit is km/h (= 0.5kn)

  print distance-distribution
  
  ; @todo recreate the ports with new information from Serra 
  ; on the distribution of the 4 clusters in each port.
  
  ; @todo introduce quotas (=> Serra, asks Jonas)
  ask home-ports [
    hatch-boats port-boat-number [
      create-link-with myself
      move-to [port-start-patch] of one-of link-neighbors

      ; The 1-based boat types are
      ; 3: "typical" 1: "longer typical" 2: "flexible" 4: "not shrimper"
      set boat-type random 4 ; @todo update with new info once we have it
      
      ; Create a boat with Gaussian distribution around mean with stdev
      set boat-length value-from-distribution butfirst butfirst item boat-type length-distribution
      
      ; The engine is relevant for plaice box (only for cluster 4).  It may also 
      ; be relevant for estimating the steaming speed, as long as there is no 
      ; independent data. 
      set boat-engine value-from-distribution butfirst butfirst item boat-type engine-distribution      
      set boat-steaming-speed 1.852 * ( 6 + random-float 7 )   ; range 6 to 12 kn, i.e. 11 to 20 km/h 
      
      ; boat-max-distance and boat-max-duration are adaptable, but
      ; rather the fishers prefer boat-tripfrequency by budgeting
      ; against their boat-total-fishing-hours
      set boat-max-distance 0.001 * value-from-distribution butfirst butfirst item boat-type distance-distribution
      set boat-max-duration value-from-distribution butfirst butfirst item boat-type triplength-distribution
      
      ;print (sentence "Boat" who boat-max-distance)
      ; Boat capacity is not relevant for shrimpers as freshness is key concern
      set  boat-capacity 100000                                  ; kg of storage
      
      
      set  boat-gear-catches         n-values number-of-gears  [?1 -> 0 ] 
      set  catch-efficiency-boat   n-values number-of-gears  [?1 -> 0.25 ]
      set  revenue-boat            n-values number-of-gears  [?1 -> 0 ]   ; revenue for the fishing trip of the boat
      set  costs-boat              n-values number-of-gears  [?1 -> 0 ]    ; costs for the fishing trip of the boat
      set  gain-boat               n-values number-of-gears  [?1 -> 0 ]    ; gain for the fishing trip of the boat
      set  boat-delta-priorities   n-values number-of-gears  [?1 -> 0 ]    ; change of priority for the pathway
      set  boat-gear-priorities         n-values number-of-gears  [?1 -> 1 / number-of-gears ]    ; priority for the pathway
      set  transportation-costs  0                            ; start value, is calculated according to trip-length, fuel efficiency and oil-price
      set  operating-costs 0                                  ; start value, is calculated according to wage and time at sea
      set  fishing-speed random-normal fishing-speed-mean fishing-speed-sdev                        ; range 2 kn to 4 kn to get km multiply by 1.852 ; ranging from 3.7 to 7.4 km/h
      set  boat-steaming-speed 19                                  ; range 10  to 12
      set label ""                                             ; ????

      ; Serra: About 160 boats of the entire fleet don't change at all, make them have available only 1 gear
      ; there are smaller groups of boats that do different things.  Only for those allow to have multiple years available
      ; there are some seasonal changes, but likley not at monthly or sub-monthly scale. Let's try 3 months
      ; Also include every 3 months when gear change is deliberated the previous year's experience
      ; Add location and fishing trip length in option pathways.

      set boat-gears n-values number-of-gears [i -> gear i] ; assign a list of gears available in the same order to all the boats
          
      set boat-trip-phase 1 ; in port and available
      set boat-home-port myself
      set boat-needs-return? false
      set boat-hour 0
    ]
    ask my-links [set hidden? true]
  ]
  
end

to-report csv-property [x]
  let filename (word "../data/orey_etal_data/musselabm-" x ".csv")
  report butfirst csv:from-file filename
end

to-report __test_csv_property   
  let lpue csv-property "LPUE"
  report lpue = [[1 41.33597392121994 44.29353998676394 12.592817787094033 11.456572055826198 96.83554521537783] [2 44.896109846997646 44.93153848086322 10.283125939897474 27.14061269693432 63.39053728677305] [3 52.3697708750142 54.51564668646204 15.098579547056138 27.91232373317848 111.57142350676918] [4 3.845738658502041 13.822901977235906 18.237950929313804 0.9253936126421393 60.43421042459698]]
end

; This is a boat procedure initializing a new
; fishing trip from the start patch of its associated
; favorite port
to boat-leave-port

  ; Determine start end end patches of fishing activity.  This is usually the start/landing
  ; patch of a harbour, but for fishery subject to plaice box restriction, this is the nearest
  ; patch outside the plaice box.
  let _patch [port-start-patch] of boat-home-port    ; starting patch of the boat
  let _distance gis-distance _patch
  
  pen-up
  move-to _patch

  set boat-distance-at-sea boat-distance-at-sea + _distance
  set boat-time-at-sea  boat-time-at-sea + _distance / boat-steaming-speed
  set boat-time-at-sea-left boat-time-at-sea-left - _distance / boat-steaming-speed
  set boat-hour boat-hour + _distance / boat-steaming-speed

  set boat-trip-phase 2 ; available at start patch

end


; This is a boat procedure  where a boat
; rests in a poart
to boat-rest-port
  
  set boat-distance-at-sea 0
  set boat-time-at-sea  0 
  
  set boat-time-at-sea-left boat-max-duration
  set boat-hour boat-hour + 11

  set boat-trip-phase 1 ; ready to leave port

end



; This is a boat procedure  where a boat
; steams from it's start patch to a preferred location for fishing
; @todo do this from memory, now random
to boat-choose-start

  let _patch one-of boat-accessible-patches in-radius 30
  let _distance gis-distance _patch

  pen-up
  move-to _patch
  
  set boat-distance-at-sea boat-distance-at-sea + _distance
  set boat-time-at-sea  boat-time-at-sea + _distance / boat-steaming-speed
  set boat-time-at-sea-left boat-time-at-sea-left - _distance / boat-steaming-speed
  set boat-hour boat-hour + _distance / boat-steaming-speed

  set boat-trip-phase 3 ; ready to fish
  set heading random 360

end

; This is a boat procedure  where a boat
to boat-return-port

  let _patch [port-start-patch] of boat-home-port
  let _distance gis-distance _patch
  let _time _distance / boat-steaming-speed

  pen-up
  move-to _patch
  
  set boat-distance-at-sea boat-distance-at-sea + _distance
  set boat-time-at-sea boat-time-at-sea  + _time
  set boat-time-at-sea-left boat-time-at-sea-left - _time
  set boat-hour boat-hour + _time
  
  set _distance gis-distance  boat-home-port
  set _time _distance / boat-steaming-speed

  move-to boat-home-port

  set boat-distance-at-sea boat-distance-at-sea + _distance
  set boat-time-at-sea boat-time-at-sea  + _time
  set boat-time-at-sea-left boat-time-at-sea-left - _time
  set boat-hour boat-hour + _time

  set boat-trip-phase 0 ; need to rest

end


; This is a boat procedure  where a boat
; fishes in a straight line
to boat-make-haul

  ; A boat deploys the gear with the highest priority
  let haul-width [gear-width] of item (index-max-one-of boat-gear-priorities) boat-gears
  let _fishing-speed [gear-speed] of item (index-max-one-of boat-gear-priorities) boat-gears
  let haul-time 1 ; two hours
  let _found false
  let _counter 1
  let _patch patch-ahead (_fishing-speed * haul-time)
  let _time-step 0.1 ; 6 minutes
  
  while [not _found] [
    ifelse _patch != nobody [set _found true][  
      set heading heading - 180 - _counter * 5 + random (_counter * 10 + 1)
      set _counter _counter + 1
      set _patch patch-ahead (_fishing-speed * haul-time)
    ]
  ]
  let _distance gis-distance _patch
  let _netlogo-distance distance _patch
  let _time _distance / _fishing-speed 
  
  let _new-catches n-values length boat-gears [i -> 0]
  let _haul-catches n-values length boat-gears [i -> 0]

  pen-down
  repeat (haul-time / _time-step) [
    set _new-catches boat-catch-species (_time-step * _fishing-speed)
    ask patch-here [
      set fishing-effort-hours fishing-effort-hours + _time-step
    ]
    forward _netlogo-distance * _time-step / haul-time
    set _haul-catches n-values (number-of-gears) [i -> (item i _haul-catches + item i _new-catches)]
  ]
  
  set heading heading - 180 - 10 + random (21 + 1)
  
  set boat-time-at-sea boat-time-at-sea  + _time
  set boat-distance-at-sea boat-distance-at-sea + _distance  
  set boat-time-at-sea-left boat-time-at-sea-left - _time 
  set boat-hour boat-hour + _time

  let distance-left boat-steaming-speed * boat-time-at-sea-left ; at typical speed of 19 km / h this is 1368 km
  if distance-left < 1.1 * gis-distance [port-start-patch] of boat-home-port [
    set boat-trip-phase 4
  ]
  
  ; If the catch is not worth keeping, discard it entirely. Fishers do not want to keep 
  ; the bad haul, as this  would restrict their left time, but only there are > 24 hours left
  ; On the other hand, on good haul make sure to return within 24 hours to keep it fresh
  if (boat-time-at-sea-left > 24) [
    ifelse item (index-max-one-of boat-gear-priorities) _haul-catches < min-fresh-catch [
      set _haul-catches n-values length boat-gears [i -> 0]
      set boat-trip-phase 2
    ][
      set boat-time-at-sea-left 24
    ]
  ]
  set boat-gear-catches n-values (number-of-gears) [i -> (item i boat-gear-catches + item i _haul-catches)]
  
  ; If the boat is full, also need to return  
  if item (index-max-one-of boat-gear-priorities) boat-gear-catches > boat-capacity [ set boat-trip-phase 4]
  
  ;print (sentence "Boat" who _distance _time distance-left boat-time-at-sea-left )
  
end


; This boat procedure return the agent-set of accessible patches considering
; the plaice box restriction if highest priority gear's prey is plaice.
to-report boat-accessible-patches
  
  let my-patches patches with [accessible?]

  let my-target-species item (index-max-one-of boat-gear-priorities) gear-prey-names
  if my-target-species = nobody [ set my-target-species  "other" ]
  if (boat-engine > 221 and my-target-species = "Pleuronectes") [
    set my-patches my-patches with [not plaice-box?]
  ]
  
  report my-patches

end

; test procedure
to go-one
  let _boat min-one-of boats [who]
  watch _boat
  inspect _boat
  ;let _boat boats
  ask _boat [
    set size 4
    while [boat-hour < 24] [
      ifelse (boat-trip-phase = 4) [ ; boat needs to go home
        ;print (sentence boat-hour ": Boat" who "is going home")
        boat-return-port
      ][
      ifelse (boat-trip-phase = 3) [ ; boat is ready to fish
        ;print (sentence boat-hour ": Boat" who "hauls from" patch-here)
        boat-make-haul
      ][
      ifelse (boat-trip-phase = 2) [ ; boat ready to steam to new patch
        ;print (sentence boat-hour ": Boat" who "steams from" patch-here)
        boat-choose-start
      ][
      ifelse (boat-trip-phase = 1) [ ; boat ready to leave port
        ;print (sentence boat-hour ": Boat" who "leaves" [port-name] of boat-home-port)
        boat-leave-port
      ][
        ; (boat-trip-phase = 0) [ ; boat ready to leave port
        ;print (sentence boat-hour ": Boat" who "rests at " [port-name] of boat-home-port)
        boat-rest-port
      ]]]]
    ]
    set boat-hour boat-hour mod 24
    print (sentence boat-hour ": Boat" who "resets clock to" boat-hour)
  ]
end

; This new go procedure used discrete event simulation within a 24 hour tick
; It is more efficient than the oritinal 72-h based go procedure but does not
; yet contain the priority calculation
to go-all

  advance-calendar
  calc-fish
  
  let _boats boats with [boat-hour < 24]
  while [count _boats > 0] [
    ask _boats [  
      ifelse (boat-trip-phase = 4) [ boat-return-port ][
        ifelse (boat-trip-phase = 3) [  boat-make-haul ][
         ifelse (boat-trip-phase = 2) [ boat-choose-start ][
           ifelse (boat-trip-phase = 1) [ boat-leave-port ][
             ; (boat-trip-phase = 0) [ ; boat ready to leave port
             boat-rest-port
      ]]]]
    ]
    set _boats boats with [boat-hour < 24]
  ]
  ask boats [ set boat-hour boat-hour mod 24 ]
  
  update-plots
  tick

end


to-report boat-catch-species [haul-length]
  ; calculate the values for each patch and every target species
  ;(solea, platessa and crangon), i.e. biomass cath in KG
  ; @todo: negative values possible for fish-biomass

  let ispecieslist n-values (number-of-gears) [igear -> position ([gear-species] of item igear boat-gears) patch-prey-names ]

  report n-values (number-of-gears) [ igear ->
     (item igear catch-efficiency-boat) * (item (item igear ispecieslist) fish-biomass)
      * (([gear-width] of item igear boat-gears) * haul-length) * (boolean2int (item (item igear ispecieslist) fish-biomass > 0) )
  ]

end


