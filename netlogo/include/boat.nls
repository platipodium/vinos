; SPDX-FileCopyrightText: 2022-2023 Universität Hamburg (UHH)
; SPDX-FileCopyrightText: 2022-2023 Helmholtz-Zentrum hereon GmbH (Hereon)
; SPDX-FileCopyrightText: 2023 Hochschule Bremerhaven
; SPDX-License-Identifier: Apache-2.0
;
; SPDX-FileContributor: Carsten Lemmen <carsten.lemmen@hereon.de>
; SPDX-FileContributor: Sascha Hokamp <sascha.hokamp@uni-hamburg.de>
; SPDX-FileContributor: Jieun Seo <jieun.seo@studium.uni-hamburg.de>
; SPDX-FileContributor: Serra Örey <soerey@hs-bremerhaven.de>

extensions [csv]

breed [boats boat]

boats-own [
  boat-gear-catches              ; for each boat a vector of fish catches (per patch or tick)
  harvest-boat                 ; for each boat a vector of total harvest of the fish species
  catch-efficiency-boat        ; how much fish is effectively catched
  boat-capacity                ; size of the boat
  ;boat-engine-power                

  revenue-boat             ; revenue for the fishing trip of the boat
  costs-boat               ; costs for the fishing trip of the boat
  delta-gain-boat          ; change in gain
  gain-boat                ; gain for the fishing trip of the boat
  boat-delta-priorities      ; change in priority
  boat-gear-priorities            ; priority for the pathway
  priority-weighted-average  ; priority weighted average of gain

  fishing-speed            ; speed when fishing (replaced by gear-speed later on)
  boat-steaming-speed           ; speed when steaming

  ; @todo make into a vector for the species
  solea-catch-kg          ; catch of solea in kg for a fishing trip
  solea-catch-euro        ; catch of solea in EUR 2015 for a fishing trip
  platessa-catch-kg       ; catch of platessa in kg for a fishing trip
  platessa-catch-euro     ; catch of platessa in EUR 2015 for a fishing trip
  crangon-catch-kg        ; catch of crangon in kg for a fishing trip
  crangon-catch-euro      ; catch of crangon in EUR 2015 for a fishing trip
  other-catch-kg          ; other catch in kg for a fishing trip
  other-catch-euro        ; other catch in EUR 2015 for a fishing trip

  transportation-costs    ; costs for one km of the fishing trip, not known, work with a parameter
                          ; comment: mainly driven by oil price, approx 10-20 percent of the revenue for crangon, up to 30 percent for solea and platessa according to press relesease March 2022 going up to 50 percent
  operating-costs         ; cost for opertating the boat, not known, work with a parameter
                          ; comment: approximately 50 percent of the revenue
  target-species          ; species primarily tragetted (solea, platessa, crangon)

  boat-landing-port       ; favorite-landing-port (in the current state there is the one favorite port, which is the landing port)
  boat-home-port          ; Home Port (in the current state only German home ports are considered
  pathways                ; possible pathways which boats learn
  boat-gears              ; set of available gears on this boat
  boat-type               ; Number 1-4 of the named cluster
  boat-length             ; length of boat in m, related (yet unknown) to capacity.
  boat-engine             ; power of the engine in kW
  boat-max-distance
  boat-triplength
  
  boat-time-at-sea
  boat-time-at-sea-left
  boat-distance-at-sea
  
  ; value encoding the state the boat is in during a fishing trip.
  ; 0 in port not available, i.e. resting, refueling, grounded
  ; 1 in port and available
  ; 2 at start patch and ready to deploy gear
  ; 3 at sea and able to go further out
  ; 4 at sea, needing to go home
  ; 5 at landing patch, ready to offload
  boat-trip-phase 
  boat-needs-return?
  
  
]


to setup-boats

  set-default-shape boats "boat top"
  
  ; read distribution of boat properties
  let lpue-distribution csv-property "LPUE"
  let engine-distribution csv-property "VE_KW"
  let distance-distribution csv-property "distance_to_port"
  let triplength-distribution csv-property "triplength"
  let length-distribution csv-property "VE_LEN"
  let hours-distribution csv-property "total_fishinghours"
  
  ; @todo get th fishing speed from gear-speed
  let fishing-speed-mean 5.556 ; unit is km/h (= 3kn)
  let fishing-speed-sdev 0.926 ; unit is km/h (= 0.5kn)


  ; @todo recreate the ports with new information from Serra 
  ; on the distribution of the 4 clusters in each port.
  
  ; @todo introduce quotas (=> Serra, asks Jonas)
  ask home-ports [
    hatch-boats port-boat-number [
      create-link-with myself
      move-to [port-start-patch] of one-of link-neighbors

      ; The 1-based boat types are
      ; 3: "typical" 1: "longer typical" 2: "flexible" 4: "not shrimper"
      set boat-type random 4 ; @todo update with new info once we have it
      
      ; Create a boat with Gaussian distribution around mean with stdev
      set boat-length value-from-distribution butfirst butfirst item boat-type length-distribution
      
      ; The engine is relevant for plaice box (only for cluster 4).  It may also 
      ; be relevant for estimating the steaming speed, as long as there is no 
      ; independent data. 
      set boat-engine value-from-distribution butfirst butfirst item boat-type engine-distribution      
      set boat-steaming-speed 1.852 * ( 6 + random-float 7 )   ; range 6 to 12 kn, i.e. 11 to 20 km/h 
      
      ; boat-max-distance and boat-triplength are adaptable, but
      ; rather the fishers prefer boat-tripfrequency by budgeting
      ; against their boat-total-fishing-hours
      set boat-max-distance value-from-distribution butfirst butfirst item boat-type distance-distribution
      set boat-triplength value-from-distribution butfirst butfirst item boat-type triplength-distribution
      
      ; Boat capacity is not relevant for shrimpers as freshness is key concern
      set  boat-capacity 100000                                  ; kg of storage
      
      
      set  boat-gear-catches         n-values number-of-gears  [?1 -> 0 ] 
      set  catch-efficiency-boat   n-values number-of-gears  [?1 -> 0.25 ]
      set  revenue-boat            n-values number-of-gears  [?1 -> 0 ]   ; revenue for the fishing trip of the boat
      set  costs-boat              n-values number-of-gears  [?1 -> 0 ]    ; costs for the fishing trip of the boat
      set  gain-boat               n-values number-of-gears  [?1 -> 0 ]    ; gain for the fishing trip of the boat
      set  boat-delta-priorities   n-values number-of-gears  [?1 -> 0 ]    ; change of priority for the pathway
      set  boat-gear-priorities         n-values number-of-gears  [?1 -> 1 / number-of-gears ]    ; priority for the pathway
      set  transportation-costs  0                            ; start value, is calculated according to trip-length, fuel efficiency and oil-price
      set  operating-costs 0                                  ; start value, is calculated according to wage and time at sea
      set  fishing-speed random-normal fishing-speed-mean fishing-speed-sdev                        ; range 2 kn to 4 kn to get km multiply by 1.852 ; ranging from 3.7 to 7.4 km/h
      set  boat-steaming-speed 19                                  ; range 10  to 12
      set label ""                                             ; ????

      ; Serra: About 160 boats of the entire fleet don't change at all, make them have available only 1 gear
      ; there are smaller groups of boats that do different things.  Only for those allow to have multiple years available
      ; there are some seasonal changes, but likley not at monthly or sub-monthly scale. Let's try 3 months
      ; Also include every 3 months when gear change is deliberated the previous year's experience
      ; Add location and fishing trip length in option pathways.

      set boat-gears n-values number-of-gears [i -> gear i] ; assign a list of gears available in the same order to all the boats
          
      set boat-trip-phase 1 ; in port and available
      set boat-home-port myself
      set boat-needs-return? false
    ]
    ask my-links [set hidden? true]
  ]
  
end

to-report csv-property [x]
  let filename (word "../data/orey_etal_data/musselabm-" x ".csv")
  report butfirst csv:from-file filename
end

to-report __test_csv_property   
  let lpue csv-property "LPUE"
  report lpue = [[1 41.33597392121994 44.29353998676394 12.592817787094033 11.456572055826198 96.83554521537783] [2 44.896109846997646 44.93153848086322 10.283125939897474 27.14061269693432 63.39053728677305] [3 52.3697708750142 54.51564668646204 15.098579547056138 27.91232373317848 111.57142350676918] [4 3.845738658502041 13.822901977235906 18.237950929313804 0.9253936126421393 60.43421042459698]]
end


; This is a boat procedure, it takes duration (in hours) as an argument.  A haul is a straight-line
; fishing activity for the duration given.  
; @todo this is not yet completely implemented
to boat-haul [duration]
  
  let time-elapsed 0
  let time-step 0.1 ; in hours, i.e. 6 minutes
  let new-catch n-values length boat-gears [i -> 0]
  let my-haul-catch n-values length boat-gears [i -> 0]
  let l-patch [port-start-patch] of boat-home-port
  let s-patch [port-start-patch] of boat-home-port
  let distance-to-alternative-patch 40
  
  while [not boat-needs-return? and time-elapsed < duration] [

    set time-elapsed time-elapsed + time-step
    set new-catch catch-species (time-step * fishing-speed)
    ask patch-here [
      set fishing-effort-hours fishing-effort-hours + time-step
     ]
     forward fishing-speed * time-step ; @todo adjust to gear
     set my-haul-catch n-values (number-of-gears) [i -> (item i boat-gear-catches + item i new-catch)]
  
  ]
  set boat-time-at-sea-left boat-time-at-sea-left - time-elapsed
  set boat-time-at-sea boat-time-at-sea + time-elapsed
  set boat-distance-at-sea boat-distance-at-sea + time-elapsed * fishing-speed
  let distance-left boat-steaming-speed * boat-time-at-sea-left ; at typical speed of 19 km / h this is 1368 km

  
  ; If the catch is not worth keeping it, discard it entirely and
  ; reset the time left. Fishers don't want to keep the bad haul, as this
  ; would restrict their left time
  ; @todo could this lead to infinite stay at sea?
  if (item 1 my-haul-catch < min-fresh-catch and boat-time-at-sea-left < 24)[
      set boat-time-at-sea-left 24
      set my-haul-catch n-values length boat-gears [i -> 0]
   ]
   
  ; But if the catch is successful, then make
  ; sure that the timeout is maximum 24 hours (to keep the fish fresh)
  ; @todo this is not properly implemented yet
  if (item 1 new-catch > min-fresh-catch and boat-time-at-sea-left > 24)[
        set boat-time-at-sea-left 24
      ]

      ; Evaluate whether to go home based on different criteria, i.e.
      ; capacity exceeded, too far from home port, or

      if (item 1 boat-gear-catches > boat-capacity) [
        print (list "Boat" who "full. Needs to go back to port")
        set boat-needs-return? true
      ]
      if (gis-distance l-patch > distance-left) [
        print (list "Boat" who "went far enough, needs to go home to reach port")
        set boat-needs-return? true
      ]
      ;if (time-left < gis-distance l-patch / boat-steaming-speed) [
      ;  print (list "Boat" who "is running out of time, needs to go home to reach port")
      ;  set boat-needs-return? true
      ;]

      ; in case of a bad haul, select a different patch.
      ; for now, we choose a  neighbor patch, later we have to implement
      ; a procedure to find a patch approx 20 km away
      ; @todo check units
      ;if (false) [
      if (item 1 new-catch < min-fresh-catch) [
    let my-neighbors patches  with [accessible? and gis-distance l-patch < distance-left and gis-distance myself < distance-to-alternative-patch and gis-distance [boat-home-port] of myself > 5 ] ; @todo: currently set to 20, revise with respect to memorx
        ifelse any? my-neighbors [
          set s-patch one-of my-neighbors
          print (list "Boat" who "start a new haul at a different patch with depth" ([depth] of s-patch))
        ][
          print (list "Boat" who "could not find any navigable water, going home")
          set boat-needs-return? true
        ]
        move-to s-patch
        set boat-distance-at-sea boat-distance-at-sea + gis-distance s-patch
        set distance-left distance-left - gis-distance s-patch
        set boat-time-at-sea boat-time-at-sea + gis-distance s-patch / boat-steaming-speed
        set boat-time-at-sea-left boat-time-at-sea-left - gis-distance s-patch / boat-steaming-speed
      ]

      print (list "Boat" who "t=" boat-time-at-sea "t-=" boat-time-at-sea-left "dh=" (gis-distance l-patch) "d=" boat-distance-at-sea "d-=" distance-left "c1=" (item 1 boat-gear-catches) )
      ;print (list who ([depth] of patch-here))
    
end



; This is a boat procedure initializing a new
; fishing trip from the start patch of its associated
; favorite port
to boat-leave-port

  ; Determine start end end patches of fishing activity.  This is usually the start/landing
  ; patch of a harbour, but for fishery subject to plaice box restriction, this is the nearest
  ; patch outside the plaice box.
  let s-patch [port-start-patch] of boat-home-port    ; starting patch of the boat
  let l-patch [port-landing-patch] of boat-home-port  ; landing patch of the boat

  pen-up
  move-to s-patch

  set boat-distance-at-sea gis-distance boat-home-port
  set boat-time-at-sea  boat-distance-at-sea / boat-steaming-speed

  let my-target-species item (index-max-one-of boat-gear-priorities) gear-prey-names
  if my-target-species = nobody [ set my-target-species  "other" ]

  ifelse (boat-engine > 221 and my-target-species = "Pleuronectes") [
    set s-patch min-one-of patches with [accessible? and not plaice-box?] [gis-distance s-patch]
    set l-patch s-patch
    print (list "Boat" who "leaves from" s-patch "outside plaice box with depth" ([depth] of s-patch))
  ][
    print (list "Boat" who "leaves from" s-patch "at depth" ([depth] of s-patch) "m " boat-distance-at-sea "km and" boat-time-at-sea "h from home" )
  ]

  set boat-trip-phase 2 ; available at start patch

end

; This boat procedure return the agent-set of accessible patches considering
; the plaice box restriction if highest priority gear's prey is plaice.
to-report boat-accessible-patches
  
  let my-patches patches with [accessible?]

  let my-target-species item (index-max-one-of boat-gear-priorities) gear-prey-names
  if my-target-species = nobody [ set my-target-species  "other" ]
  if (boat-engine > 221 and my-target-species = "Pleuronectes") [
    set my-patches my-patches with [not plaice-box?]
  ]
  
  report my-patches

end



