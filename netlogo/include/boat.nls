; SPDX-FileCopyrightText: 2022-2023 Universität Hamburg
; SPDX-FileCopyrightText: 2022-2023 Helmholtz-Zentrum hereon GmbH
; SPDX-FileCopyrightText: 2023 Hochschule Bremerhaven
; SPDX-License-Identifier: Apache-2.0
;
; SPDX-FileContributor: Carsten Lemmen <carsten.lemmen@hereon.de>
; SPDX-FileContributor: Sascha Hokamp <sascha.hokamp@uni-hamburg.de>
; SPDX-FileContributor: Jürgen Scheffran <juergen.scheffran@uni-hamburg.de>
; SPDX-FileContributor: Jieun Seo <jieun.seo@studium.uni-hamburg.de>
; SPDX-FileContributor: Serra Örey <soerey@hs-bremerhaven.de>

extensions [csv]

breed [boats boat]
breed [markers marker]

boats-own [
  ; Static properties individual to each boat
  boat-capacity           ; size of the boat, @todo should be in kg
  boat-steaming-speed     ; speed when steaming
  fishing-speed           ; speed when fishing (replaced by gear-speed later on)
  boat-landing-port       ; favorite-landing-port (in the current state there is the one favorite port, which is the landing port)
  boat-home-port          ; Home Port (in the current state only German home ports are considered
  boat-gears              ; set of available gears on this boat
  boat-type               ; Number 1-4 of the named cluster
  boat-length             ; length of boat in m, related (yet unknown) to capacity.
  boat-engine             ; power of the engine in kW

  boat-max-distance
  boat-max-duration  ; cluster-dependent typical trip length


  boat-trip-gear-catches       ; for each boat a vector of fish catches accumulated during a trip
  ;boat-history-prey-catches    ; for each boat a vector of total harvest of the fish species
  catch-efficiency-boat        ; how much fish is effectively catched

  revenue-boat             ; revenue for the fishing trip of the boat
  costs-boat               ; costs for the fishing trip of the boat
  boat-delta-gains          ; change in gain
  boat-gains                ; gain for the fishing trip of the boat
  boat-delta-priorities      ; change in priority
  boat-gear-priorities            ; priority for the pathway
  priority-weighted-average  ; priority weighted average of gain


  ; @todo make into a vector for the species
  solea-catch-kg          ; catch of solea in kg for a fishing trip
  solea-catch-euro        ; catch of solea in EUR 2015 for a fishing trip
  platessa-catch-kg       ; catch of platessa in kg for a fishing trip
  platessa-catch-euro     ; catch of platessa in EUR 2015 for a fishing trip
  crangon-catch-kg        ; catch of crangon in kg for a fishing trip
  crangon-catch-euro      ; catch of crangon in EUR 2015 for a fishing trip
  other-catch-kg          ; other catch in kg for a fishing trip
  other-catch-euro        ; other catch in EUR 2015 for a fishing trip

  boat-transportation-costs    ; costs for one km of the fishing trip, not known, work with a parameter
                          ; comment: mainly driven by oil price, approx 10-20 percent of the revenue for crangon, up to 30 percent for solea and platessa according to press relesease March 2022 going up to 50 percent
  boat-operating-costs         ; cost for opertating the boat, not known, work with a parameter
                          ; comment: approximately 50 percent of the revenue
  target-species          ; species primarily tragetted (solea, platessa, crangon)

  boat-time-at-sea
  boat-time-at-sea-left
  boat-distance-at-sea

  ; value encoding the state the boat is in during a fishing trip.
  boat-trip-phase

  boat-trip-best-patch   ; location of patch with the highest catch during a trip
  boat-trip-best-catch

  boat-needs-return?

  boat-hour ; Internal hour of the day to facility event-based scheduling
  boat-fishable-patches ; large memory required, is this problematic?
  boat-actions ; Agentset of actions for this boat

  boat-current-gear-index

]


to setup-boats

  set-default-shape boats "boat top"

  ; read distribution of boat properties
  let lpue-distribution csv-property "LPUE"
  let engine-distribution csv-property "VE_KW"
  let distance-distribution csv-property "distance_to_port"
  let triplength-distribution csv-property "triplength"
  let length-distribution csv-property "VE_LEN"
  let hours-distribution csv-property "total_fishinghours"

  ; @todo get th fishing speed from gear-speed
  let fishing-speed-mean 5.556 ; unit is km/h (= 3kn)
  let fishing-speed-sdev 0.926 ; unit is km/h (= 0.5kn)

  ; @todo introduce quotas (=> Serra, asks Jonas)
  ask home-ports [
    (foreach (range 4) port-clusters [ [i j] ->
      hatch-boats j [
        create-link-with myself
        ; The 1-based boat types are
        ; 3: "typical" 1: "longer typical" 2: "flexible" 4: "not shrimper"
        set boat-type i
      ]
    ])

    ;print ("this is the sum of each boat-type")
    ;print  (count boats with [boat-type = 0])
    ;print (count boats with [boat-type = 1])
    ;print (count boats with [boat-type = 2])
    ;print (count boats with [boat-type = 3])

    ask link-neighbors [
      move-to [port-start-patch] of myself

      ; Create a boat with Gaussian distribution around mean with stdev
      set boat-length value-from-distribution butfirst butfirst item boat-type length-distribution

      ; The engine is relevant for plaice box (only for cluster 4).  It may also
      ; be relevant for estimating the steaming speed, as long as there is no
      ; independent data.
      set boat-engine value-from-distribution butfirst butfirst item boat-type engine-distribution
      set boat-steaming-speed 1.852 * ( 6 + random-float 7 )   ; range 6 to 12 kn, i.e. 11 to 20 km/h

      ; boat-max-distance and boat-max-duration are adaptable, but
      ; rather the fishers prefer boat-tripfrequency by budgeting
      ; against their boat-total-fishing-hours
      set boat-max-distance 0.001 * value-from-distribution butfirst butfirst item boat-type distance-distribution
      set boat-max-duration value-from-distribution butfirst butfirst item boat-type triplength-distribution

      set boat-gears n-values number-of-gears [i -> gear i] ; assign a list of gears available in the same order to all the boats
      set boat-gear-priorities n-values number-of-gears  [i -> random-float 1] ; initialize priority for the pathway

      let _crangon-gear-index position "Crangon" gear-prey-names
      ifelse boat-type < 3 [
        ; shrimpers have only one gear
        set boat-gear-priorities  n-values number-of-gears [i  -> 0 ]
        set boat-gear-priorities replace-item _crangon-gear-index boat-gear-priorities  1
        set boat-current-gear-index  _crangon-gear-index
      ][
        ; non-shrimpers randomly choose between all other gears
        set boat-gear-priorities replace-item _crangon-gear-index boat-gear-priorities 0
        let _sum-priorities sum boat-gear-priorities
        set boat-gear-priorities n-values number-of-gears [ i -> item i boat-gear-priorities / _sum-priorities ]
        set boat-current-gear-index (index-max-one-of boat-gear-priorities)
      ]

      ; Boat capacity is not relevant for shrimpers as freshness is key concern
      set  boat-capacity 100000                                  ; kg of storage

      set  boat-trip-gear-catches         n-values number-of-gears  [?1 -> 0 ]
      set  catch-efficiency-boat   n-values number-of-gears  [igear -> (item igear gear-catch-efficancy) + random-float 0.20 - random-float 0.40]

      ;      set  catch-efficiency-boat   n-values number-of-gears  [?1 -> (0.15 + random-float 0.20)]
      set  revenue-boat            n-values number-of-gears  [?1 -> 0 ]   ; revenue for the fishing trip of the boat
      set  costs-boat              n-values number-of-gears  [?1 -> 0 ]    ; costs for the fishing trip of the boat
      set  boat-gains               n-values number-of-gears  [?1 -> 0 ]    ; gain for the fishing trip of the boat
      set  boat-delta-priorities   n-values number-of-gears  [?1 -> 0 ]    ; change of priority for the pathway
      set  boat-transportation-costs  0                            ; start value, is calculated according to trip-length, fuel efficiency and oil-price
      set  boat-operating-costs 0                                  ; start value, is calculated according to wage and time at sea
      set  fishing-speed random-normal fishing-speed-mean fishing-speed-sdev                        ; range 2 kn to 4 kn to get km multiply by 1.852 ; ranging from 3.7 to 7.4 km/h
      set label ""                                             ; ????

      ; About 160 boats of the entire fleet don't change at all, make them have available only 1 gear
      ; there are smaller groups of boats that do different things.  Only for those allow to have multiple years available
      ; there are some seasonal changes, but likley not at monthly or sub-monthly scale. Let's try 3 months
      ; Also include every 3 months when gear change is deliberated the previous year's experience
      ; Add location and fishing trip length in option pathways.

      set boat-trip-phase 1 ; in port and available
      set boat-home-port myself
      set boat-needs-return? false
      set boat-hour 0
      set boat-fishable-patches boat-accessible-patches
      set boat-actions (turtle-set)
    ]
    ask my-links [set hidden? true]
  ]

end

to-report csv-property [x]

  ; Prefer actual data over fake data but fall back to it if the actual data
  ; (prefixed "musselabm") cannot be found
  let _filename (word "../data/orey_etal_data/musselabm-" x ".csv")
  let _data "####"
  carefully [
    set _data csv:from-file _filename
  ][
    set _filename (word "../data/orey_etal_data/fake_" x ".csv")
    set _data csv:from-file _filename
  ]
  ; Remove any comments starting with #
  while [starts-with _data "#" ] [ set _data butfirst _data]
  report butfirst _data
end

to-report __test_csv_property
  ;let lpue csv-property "LPUE"
  ;report lpue = [[1 41.33597392121994 44.29353998676394 12.592817787094033 11.456572055826198 96.83554521537783] [2 44.896109846997646 44.93153848086322 10.283125939897474 27.14061269693432 63.39053728677305] [3 52.3697708750142 54.51564668646204 15.098579547056138 27.91232373317848 111.57142350676918] [4 3.845738658502041 13.822901977235906 18.237950929313804 0.9253936126421393 60.43421042459698]]
  report true
end


; ---------------------------------------------------------------------------------
; The core of the boat movement are the boat trip phases from 0 (rest) to 5 (land)
; 0 in port not available, i.e. resting, refueling, grounded
; 1 in port and available
; 2 at sea and searching for place to start fishing
; 3 at sea and ready to fish
; 4 at sea, needing to go home
; 5  in port, need to unload

; Boat phase 0.  Boat procedure to rest.  This is dependent on weekends and for
; shrimpers also on Ramadan in Morocco, where 90% of landed shrimp is processed.
to boat-rest-port

  ; Boats rest for at least 11 hours and regain their ability to stay offshore
  set boat-time-at-sea-left boat-max-duration
  set boat-hour boat-hour + 11

  ; If on Monday, rest at least until 4 am
  let _day-of-week time:get "dayofweek" date
  if  _day-of-week = 1 and boat-hour < 4 [ set boat-hour 4 ]

  ; Boats arriving in port on Saturday don't go out again, neither do boats go
  ; out on a Sunday or before Monday 4 am.  Shrimpers don't go out during Ramadan.
  ; On other days, just rest 11 hours.
  ifelse _day-of-week = 6 or holiday?
  or (boat-prey = "Crangon" and is-ramadan?) [
    ; rest more
    set boat-hour 24
  ][
    ; take off
    set boat-trip-phase 1 ; ready to leave port
  ]

  ; Now introduce some weather, based on statistics of wind speeds exceeding
  ; a threshold.  See calendar.nls for details of the implementation
  if storm? [
    set boat-hour 24
    set boat-trip-phase 0
  ]

 end

; Boat trip phase 1. This is a boat procedure initializing a new
; fishing trip from the start patch of its associated
; favorite port.
to boat-leave-port

  ; Determine start end end patches of fishing activity.  This is usually the start/landing
  ; patch of a harbour, but for fishery subject to plaice box restriction, this is the nearest
  ; patch outside the plaice box.
  let _patch [port-start-patch] of boat-home-port    ; starting patch of the boat
  face _patch
  let _gis-scale gis-scale
  let _distance gis-scale * distance _patch

  ; Do not show the movement during leaving port unless we're following one boat
  if not one? [pen-up]
  move-to _patch

  if not [accessible?] of patch-here [
    error (sentence "Boat" who "on inaccessible patch" patch-here "during phase" boat-trip-phase " (leaving port)")
    stop
  ]

  set boat-distance-at-sea boat-distance-at-sea + _distance
  set boat-time-at-sea  boat-time-at-sea + _distance / boat-steaming-speed
  set boat-time-at-sea-left boat-time-at-sea-left - _distance / boat-steaming-speed
  set boat-hour boat-hour + _distance / boat-steaming-speed

  set boat-trip-phase 2 ; available at start patch

end


; This is a boat procedure  where a boat lands at a port and offloads its cargo
; here the optimization is done and the memory update
to boat-land-port

  ; "Eins bleibt immer gleich: Pro Stunde rechnet man pro PS mit einem Konsum von 0,21 Liter bei einem
  ; Diesel und 0,29 Liter bei Benzin als Treibstoff.” https://www.boatsandstories.com/verbrauch_1-3-2/
  ; At 150 PS and 48 h trip covering 300 km, the efficiency is 150*48*0,21/300 = 5 l km-1
  ; @todo we can adjust this to boat-engine power
  ; we scale the fuel-efficiency (0 to 1) with boat-fuel-consumption
  let _boat-fuel-consumption 48 * boat-engine *  1.35962 * 0.21 / 300 ; is typically 5 l km-1

  ; Diesel for shipping is usually 0.5 € l-1
  ; In the end tranpsortatino costs should be 15% of crangon reenvu, up to 30% for platessa/sole
  set boat-transportation-costs _boat-fuel-consumption * oil-price / 100 * boat-distance-at-sea; typically 750 €

  ; Typically there are 3 people aboard, i.e. 150 * 3 work hours per month.  Average wage is 5000+2*2000 per
  ; gross salary per month, adding 40% costs gives 12600 EUR, i.e. 84 € h-1, there is slider wage
  ; in the end operating costs should be around 50% of revenue
  set boat-operating-costs wage * boat-time-at-sea ; is typically 4000 €

  if (sum boat-trip-gear-catches > 0 ) [
    set costs-boat n-values (number-of-gears) [
      i -> boat-transportation-costs + boat-operating-costs
    ]
  ]

  ;let _boat-prey-catches n-values count preys [ i -> 0]

  ; Calculate the boat revenue depending on the landed species and the port, simple assumption is 3 EUR kg-1
  set revenue-boat n-values (number-of-gears)[igear -> (item igear boat-trip-gear-catches *  1000 * (item (item igear gear-prey-indices) prey-prices))]


  ;todo: procedure which also considers the other species which are caugth

  set boat-gains n-values (number-of-gears ) [i -> item i revenue-boat - item i costs-boat]
  let sum-boat-gains sum boat-gains
  let sum-boat-priorities-gains sum n-values (number-of-gears) [i -> item i boat-gear-priorities * item i boat-gains]

  carefully [
    set boat-delta-priorities n-values (number-of-gears) [
      i -> adaptation * (item i boat-gear-priorities) * (( item i boat-gains) - sum-boat-priorities-gains) / sum-boat-gains
    ]
  ][]

  set boat-gear-priorities n-values (number-of-gears) [i -> item i boat-gear-priorities + item i boat-delta-priorities]

  ; A typical revenue should be around 7500 € considering the relative relation to transport/operating costs.
  ; At the moment, boat-tranpsortation cost are 70 k€, op-costs are 2000 € revenue is 0.0002
  if one? [print (sentence "R:" boat-transportation-costs boat-operating-costs revenue-boat [action-catch] of boat-actions)]

  set boat-trip-gear-catches map [i -> 0] boat-trip-gear-catches

  set boat-distance-at-sea 0
  set boat-time-at-sea  0
  set boat-time-at-sea-left 0

  set boat-trip-phase 0

  ; now update the memory
  let _my-action nobody
  if boat-trip-best-catch > 0 [

    ifelse count boat-actions < memory-size [
      hatch-actions 1 [
        set _my-action self
        set action-gear [item 0 boat-gears] of myself
        set action-catch [boat-trip-best-catch] of myself
        set action-patch [boat-trip-best-patch] of myself
      ]

      set boat-actions  (turtle-set _my-action boat-actions)
    ][
      let _catch boat-trip-best-catch
      set _my-action one-of boat-actions with [action-catch < _catch]
      if _my-action != nobody [
        ; replace properties of that action
        ask _my-action [
          set action-gear [item 0 boat-gears] of myself
          set action-catch [boat-trip-best-catch] of myself
          set action-patch [boat-trip-best-patch] of myself
        ]
      ]
    ]
    set boat-trip-best-catch 0
    set boat-trip-best-patch nobody
  ]

  ; @todo find out how long it takes to land the catch and clean the boat, here, we assume 2 hours
  set boat-hour boat-hour + 2
end

; This is a boat procedure  where a boat
; steams from it's start patch to a preferred location for fishing
to boat-choose-start

  let _patch nobody
  ifelse count boat-actions < memory-size [
    ; random patch if not sufficient memory accumulated yet (learning phase)

    ifelse patch-here =  [port-start-patch] of boat-home-port  [
      set _patch one-of boat-fishable-patches in-radius boat-max-distance ; with [ count boats-here = 0 and distance myself < boat-max-distance]
    ][
      set _patch one-of boat-fishable-patches in-radius 30
    ]

  ][
    ; Instead of random choice, we could look at our list of pathways and choose ... based on some criteria
    ; e.g. trade-off (marginal benefit) between proximity (additional cost for steaming there) and expected gain at target
    let _action one-of boat-actions ;[ action-catch ]
    set _patch [ action-patch ] of _action

    ;  set _patch one-of boat-fishable-patches with [ distance myself < 6 ]

    ; Introduce some random component
    ;let _nearby-patch one-of neighbors with [accessible?]
    let _nearby-patch one-of boat-fishable-patches with [ count boats-here = 0 and distance myself < 6 ]
    if _nearby-patch != nobody [set _patch _nearby-patch]

  ]

  ; If there are not accessible patches found, go home and try again
  ifelse _patch = nobody [
    set boat-trip-phase 4 ; need to go home
  ][
    face _patch
    let _distance gis-scale * distance _patch

    ; Do not show the movement during choosing start unless we're following one boat
    if not one? [pen-up]
    move-to _patch
    if not [accessible?] of patch-here [
      error (sentence "Boat" who "on inaccessible patch" patch-here "during phase" boat-trip-phase "(choose start)")
    ]

    set boat-distance-at-sea boat-distance-at-sea + _distance
    set boat-time-at-sea  boat-time-at-sea + _distance / boat-steaming-speed
    set boat-time-at-sea-left boat-time-at-sea-left - _distance / boat-steaming-speed
    set boat-hour boat-hour + _distance / boat-steaming-speed

    set boat-trip-phase 3 ; ready to fish
    set heading random 360
  ]
end

; This is a boat procedure
to boat-return-port

  let _patch [port-start-patch] of boat-home-port
  face _patch
  let _distance gis-scale * distance _patch
  let _time _distance / boat-steaming-speed

  ; don't show returning to port
  pen-up
  move-to _patch

  set boat-distance-at-sea boat-distance-at-sea + _distance
  set boat-time-at-sea boat-time-at-sea  + _time
  set boat-time-at-sea-left boat-time-at-sea-left - _time
  set boat-hour boat-hour + _time

  face boat-home-port
  set _distance gis-scale * distance boat-home-port
  set _time _distance / boat-steaming-speed

  move-to boat-home-port

  set boat-distance-at-sea boat-distance-at-sea + _distance
  set boat-time-at-sea boat-time-at-sea  + _time
  set boat-time-at-sea-left boat-time-at-sea-left - _time
  set boat-hour boat-hour + _time

  set boat-trip-phase 5 ; need to land

end


; This is a boat procedure  where a boat
; fishes in a straight line
to boat-make-haul

  ; A boat deploys the gear with the highest priority
  let _haul-width [gear-width] of item boat-current-gear-index boat-gears
  let _fishing-speed [gear-speed] of item boat-current-gear-index boat-gears
  let _prey [gear-species] of  item boat-current-gear-index boat-gears
  let _iprey position _prey prey-names
  let _haul-time 1 ; one hour @todo maybe set differnet haul-time depanding on gear? (crangon could be 1.5h?)
  let _sub-steps  10 ; partition the _haul-time in _sub-steps for actual fishing
  let _sub-step-time _haul-time * 1.0 / _sub-steps
  let _cluster boat-type

  ; Calculate conversion factor netlogo units to km, needs to be recalculated after
  ; every change of heading
  let _gis-scale gis-scale
  let _haul-distance  (_fishing-speed * _haul-time / _gis-scale)

  let _patch patch-ahead _haul-distance
  let _counter 1

  ; find (up to ten times) a straight line path with accessible patches by turning,
  ; first slow then more
  ; @todo also make sure no other boats in path
  while [ (_counter < 10) and (_patch != nobody) and (not boat-accessible-path _haul-distance ) ] [
    set heading heading - 180 - _counter * 5 + random (_counter * 10 + 1)
    set _gis-scale gis-scale
    set _haul-distance  (_fishing-speed * _haul-time / _gis-scale)
    set _counter _counter + 1
    set _patch patch-ahead _haul-distance
  ]
  if _counter >= 10 [set _patch nobody]

  ; Partition the fishing in small intervals, this could probably be optimized by calculating the
  ; intersection with the patch boundaries
  ifelse _patch != nobody [

    let _new-catches n-values length boat-gears [i -> 0]
    let _haul-catches n-values length boat-gears [i -> 0]
    let _step-size _sub-step-time * fishing-speed / _gis-scale

    if show-boats? [pen-down]
    repeat (_sub-steps) [
      set _new-catches boat-catch-species (_sub-step-time * _fishing-speed)
      ask patch-here [
        set fishing-effort-hours fishing-effort-hours + _sub-step-time
        set swept-area swept-area + _haul-width * _sub-step-time * _fishing-speed
        ; @todo reduce fish on patch by amount taken out, allow for recovery

        ;set cluster-fishing-efforts replace-item _cluster cluster-fishing-efforts ((item _cluster cluster-fishing-efforts) +  fishing-effort-hours + _sub-step-time)
        ;  prey-catches                      ; annual prey catches
        ; cluster-prey-catches              ; preys caught by cluster
      ]
      while [patch-ahead _step-size != nobody and (not [accessible?] of patch-ahead _step-size)] [rt random 90]
      forward _step-size

      if not [accessible?] of patch-here [
        ; @todo make this an error
        print (sentence "Boat" who "on inaccessible patch" patch-here "during phase" boat-trip-phase "(haul)")
      ]
      set _haul-catches n-values (number-of-gears) [i -> (item i _haul-catches + item i _new-catches)]

      if item boat-current-gear-index _new-catches > boat-trip-best-catch [
        set boat-trip-best-catch item boat-current-gear-index _new-catches
        set boat-trip-best-patch patch-here
      ]
    ]

    let _next-heading heading - 180 - 10 + random (21 + 1)

    set boat-time-at-sea boat-time-at-sea  + _haul-time
    set boat-distance-at-sea boat-distance-at-sea + _haul-distance
    set boat-time-at-sea-left boat-time-at-sea-left - _haul-time
    set boat-hour boat-hour + _haul-time

    let distance-left boat-steaming-speed * boat-time-at-sea-left ; at typical speed of 19 km / h this is 1368 km
    face  [port-start-patch] of boat-home-port

    if distance-left < 1.1 * gis-scale * distance [port-start-patch] of boat-home-port [
      set boat-trip-phase 4
    ]

    set heading _next-heading

    ; If the catch is not worth keeping, discard it entirely. Fishers do not want to keep
    ; the bad haul, as this  would restrict their left time, but only there are > 24 hours left
    ; On the other hand, on good haul make sure to return within 24 hours to keep it fresh
    if (boat-time-at-sea-left > 24) [
      ifelse item boat-current-gear-index _haul-catches < min-fresh-catch [
        set _haul-catches n-values length boat-gears [i -> 0]
        set boat-trip-phase 2
      ][
        set boat-time-at-sea-left 24
      ]
    ]
    set boat-trip-gear-catches n-values (number-of-gears) [i -> (item i boat-trip-gear-catches + item i _haul-catches)]

    ; If the boat is full, also need to return
    if item boat-current-gear-index boat-trip-gear-catches > boat-capacity [ set boat-trip-phase 4]
  ][
    ; Could not find a straight-line haul from hear, so continue steaming
    set boat-trip-phase 2
  ]

  ; After a haul, create the action properties
  ; -> patch location of the haul
  ; -> gain during this haul
  ; -> gear used during this haul

  ; After the action is created
  ; -> add to patthways if length pathways < memory-size
  ; -> or, replace lowest-ranking (in terms of gain) item in pathways list

end


; This boat procedure return the agent-set of accessible patches considering
; the plaice box restriction if highest priority gear's prey is plaice.
to-report boat-accessible-patches

  let my-patches patches with [accessible?]

  let my-target-species item boat-current-gear-index gear-prey-names
  if my-target-species = nobody [ set my-target-species  "other" ]
  if (boat-engine > 221 and my-target-species = "Pleuronectes") [
    set my-patches my-patches with [not plaice-box?]
  ]

  report my-patches

end

to-report boat-catch-species [haul-length]
  ; calculate the values for each patch and every target species
  ;(solea, platessa and crangon), i.e. biomass cath in KG
  ; @todo: negative values possible for prey-biomasses


  let ispecieslist n-values (number-of-gears) [igear -> position ([gear-species] of item igear boat-gears) patch-prey-names ]

  report n-values (number-of-gears) [ igear ->
     (item igear catch-efficiency-boat) * (item (item igear ispecieslist) prey-biomasses)
      * (([gear-width] of item igear boat-gears) * haul-length) * (boolean2int (item (item igear ispecieslist) prey-biomasses > 0) )
  ]

end

; report true if all patches touched within distance d are accessible
to-report boat-accessible-path [d]
  foreach range d [ i -> if (not member? patch-ahead i boat-fishable-patches) [report false]]
  report true
  ;report all? (patch-set (n-values d [ i ->  patch-ahead i])) [accessible?]
end

; turtle procedure, returns the scaling km/netlogo-unit in the heading of
; a turtle
to-report gis-scale
  ;report 2
  hatch-markers 1 [
    create-link-with myself
  ]
  let _marker one-of link-neighbors with [breed = markers]

  ask _marker [forward 2] ; must be more than sqrt 2 to cover diagonal of square
  let _gis-distance gis-envelope-distance (turtle-set self  _marker)
  if _gis-distance = 0 [
    ask _marker [ move-to self forward -2 ]
    set _gis-distance gis-envelope-distance (turtle-set self  _marker)
  ]
  ask my-out-links with [breed = markers][die]
  ask _marker [die]

  report  _gis-distance / 1.5
end

; Boat procedure reporting the active gear, i.e. that with the highest
; priority
to-report boat-gear
  report [gear-name] of item boat-current-gear-index boat-gears
end

; Boat procedure reporting the active prey, i.e. that caught with the highest
; priority gear
to-report boat-prey
  report [gear-species] of item boat-current-gear-index boat-gears
end
