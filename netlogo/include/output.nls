; SPDX-FileCopyrightText: 2023 Helmholtz-Zentrum hereon GmbH
; SPDX-License-Identifier: Apache-2.0
; SPDX-FileContributor: Carsten Lemmen <carsten.lemmen@hereon.de>
; Routines that are used to write to the UI output area

; The output area should display a table of shrimper fleet statistics for
; benchmarking, instead of using separate monitors
to update-output
  clear-output
  let _shrimpers boats with [[gear-species] of item boat-current-gear-index boat-gears = "Shrimp"
    and boat-total-landings > 0 and boat-total-time-at-sea > 0]

  let _days days-in-past-year
  if _days < 1 [set _days 1E6] ; prevent division by zero

  let _header    (list  "n" "Fuel" "Wage" "Landed" "Sea" "LPUE" "Fuel-Eff" "pEffort"  "pEffort")
  let _units     (list  ""  "€/d"  "€/d"  "kg/d"   "d"   "kg/d" "l/kg"     "h/a"      "MWh/a" )
  let _reference (list  ""  ""     ""     "750"    75     750    ""        ""         "")

  let _padding n-values length _header [ _i -> max (list 4 (2 + length item _i _header))]

  foreach range length _header [ _i ->  output-type right-pad item _i _header item _i _padding]
  output-print ""
  foreach range length _units [ _i ->  output-type right-pad item _i _units item _i _padding]
  output-print ""
  foreach range length _reference [ _i ->  output-type right-pad item _i _reference item _i _padding]
  output-print ""

  let _values (list
    count _shrimpers
    round ( mean [ boat-fuel-lperh * boat-total-time-at-sea ] of _shrimpers * oil-price / 100 / _days)
    round ( mean [ boat-total-time-at-sea] of _shrimpers  * wage / _days )
    round (fleet-annual-landing / 1000)
    round (fleet-annual-effort-hours / 24)
    ;round (fleet-lpue-days)
    ;round ( sum [boat-total-fuel ] of _shrimpers  / fleet-annual-landing)
    round patch-annual-effort-hours-per-boat
    round patch-annual-effort-mwatthours-per-boat
    round patch-annual-effort-mwatthours-per-boat
    round fleet-annual-revenue
  )

  foreach range length _values [ _i ->  output-type right-pad item _i _values item _i _padding]

end

; Observer procedure, for each patch effort is upscaled to a full year and multiplied by its area
; unit is h a-1 per boat
; Its value should be around 880000 MWh for the fleet or 427 per MWh per boat
to-report patch-annual-effort-hours-per-boat
  let _days days-in-past-year
  if _days < 1 [report 0]
  report 365.25 / _days * (sum [ area * sum patch-monthly-effort-hours ] of water-patches)
    / (sum [ area ] of water-patches) / count boats
end

; Observer procedure, for each patch effort is upscaled to a full year and multiplied by its area
; unit is MWh a-1 per boat
; Its value should be around 47000 for the fleet or 230 h per boat
to-report patch-annual-effort-mwatthours-per-boat
  let _days days-in-past-year
  if _days < 1 [report 0]
  report 365.25 / _days * (sum [ area * sum patch-monthly-effort-mwatthours ] of water-patches)
    / (sum [ area ] of water-patches) / count boats
end

; Observer procedure, the shrimpers should report about 12 kt
to-report fleet-annual-landing
  let _days days-in-past-year
  if _days < 1 [report 0]
  report 365.25 / _days * sum fleet-monthly-landing
end

to-report fleet-annual-revenue
  let _days days-in-past-year
  if _days < 1 [report 0]
  report 365.25 / _days * sum fleet-monthly-revenue
end

to-report fleet-annual-effort-hours
  let _days days-in-past-year
  if _days < 1 [report 0]
  report 365.25 / _days * sum fleet-monthly-effort-hours
end

to-report depth-monitor
  let _total sum [ sum patch-monthly-effort-hours ] of water-patches
  let _sub10 (sum [ sum patch-monthly-effort-hours ] of (water-patches with [depth <= 10]))
  let _sub20 (sum [ sum patch-monthly-effort-hours ] of (water-patches with [depth > 10 and depth <= 20]))

  report (list
    round (100 * _sub10 / _total)
    round (100 * _sub20 / _total)
  )
end
