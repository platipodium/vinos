; SPDX-FileCopyrightText: 2023 Helmholtz-Zentrum hereon GmbH
; SPDX-License-Identifier: Apache-2.0
; SPDX-FileContributor: Carsten Lemmen <carsten.lemmen@hereon.de>
; Routines that are used to write to the UI output area

; The output area should display a table of shrimper fleet statistics for
; benchmarking, instead of using separate monitors
to update-output
  clear-output
  let _shrimpers boats with [[gear-species] of item boat-current-gear-index boat-gears = "Shrimp"
    and boat-total-landings > 0 and boat-total-time-at-sea > 0]

  if not any? _shrimpers [stop]

  let _days days-in-past-year
  if _days < 1 [set _days 1E6] ; prevent division by zero

  let _header    (list  "n" "Fuel" "Wage" "Landed" "Sea" "LPUE" "Fuel-Eff" "Revenue"  "pEffort"  "<10m"  "<20m")
  let _units     (list  ""  "€/d"  "€/d"  "t"      "d"   "kg/d" "ml/kg"     "M€"      "MWh/a"    "%"     "%"   )
  let _reference (list  ""  ""     ""     "10000"    75     750    750      ""         ""        ">43"   ">90" )

  let _padding n-values length _header [ _i -> max (list 4 (2
    + length item _i _header))]

  foreach range length _header [ _i ->  output-type right-pad item _i _header item _i _padding]
  output-print ""
  foreach range length _units [ _i ->  output-type right-pad item _i _units item _i _padding]
  output-print ""
  foreach range length _reference [ _i ->  output-type right-pad item _i _reference item _i _padding]
  output-print ""

  ;print _shrimpers
  ;print [boat-fuel-lperh] of _shrimpers * oil-price / 100 / 365.25 / count _shrimpers
  let  _fuel-cost mean [boat-fuel-lperh] of _shrimpers * oil-price / 100 / 365.25 / count _shrimpers
  let  _wage-cost wage  / 365.25 / count _shrimpers
  let _lpue 0
  if annual-average fleet-monthly-hours > 0 [
    set _lpue annual-average fleet-monthly-landing / annual-average fleet-monthly-hours * 24.0
  ]
  let _fuel-efficiency 0
  if annual-average fleet-monthly-landing  > 0 [
    set _fuel-efficiency annual-average fleet-monthly-landing / annual-average fleet-monthly-fuel * 1000
  ]

  let _total sum [ sum patch-monthly-effort-hours ] of water-patches
  if _total = 0 [ set _total 1E6 ]
  let _sub10 (sum [ sum patch-monthly-effort-hours ] of (water-patches with [depth <= 10]))
  let _sub20 (sum [ sum patch-monthly-effort-hours ] of (water-patches with [depth <= 20]))

  let _values (list
    count _shrimpers
    round ( annual-average fleet-monthly-fuel  * _fuel-cost )
    round ( annual-average fleet-monthly-hours * _wage-cost )
    round ( annual-average fleet-monthly-landing / 1000 )
    round ( annual-average fleet-monthly-hours / 24 / count _shrimpers)
    round ( _lpue)
    round ( _fuel-efficiency )
    round ( annual-average fleet-monthly-revenue  / 1E6 )
    round ( patch-annual-effort-mwatthours-per-boat )
    round ( _sub10 / _total * 100 )
    round ( _sub20 / _total * 100 )
  )

  foreach range length _values [ _i ->  output-type right-pad item _i _values item _i _padding]

end

; Observer procedure, for each patch effort is upscaled to a full year and multiplied by its area
; unit is h a-1 per boat
; Its value should be around 880000 MWh for the fleet or 427 per MWh per boat
to-report patch-annual-effort-hours-per-boat
  let _days days-in-past-year
  if _days < 1 [report 0]
  report 365.25 / _days * (sum [ area * sum patch-monthly-effort-hours ] of water-patches)
    / (sum [ area ] of water-patches) / count boats
end

; Observer procedure, for each patch effort is upscaled to a full year and multiplied by its area
; unit is MWh a-1 per boat
; Its value should be around 47000 for the fleet or 230 h per boat
to-report patch-annual-effort-mwatthours-per-boat
  let _days days-in-past-year
  if _days < 1 [report 0]
  report 365.25 / _days * (sum [ sum patch-monthly-effort-mwatthours ] of water-patches) / count boats
end

; Observer procedure reporting annual averages of
; monthly data (like fleet-annual-effort-hours)
to-report annual-average [_arg]
  if not is-list? _arg [ error "Input needs to be a list"]
  if length _arg != 12 [ error "Input needs to be a list of length 12"]
  let _days days-in-past-year
  if _days < 1 [report 0]
  report 365.25 / _days * sum _arg
end

to-report depth-monitor
  let _total sum [ sum patch-monthly-effort-hours ] of water-patches
  let _sub10 (sum [ sum patch-monthly-effort-hours ] of (water-patches with [depth <= 10]))
  let _sub20 (sum [ sum patch-monthly-effort-hours ] of (water-patches with [depth > 10 and depth <= 20]))

  report (list
    round (100 * _sub10 / _total)
    round (100 * _sub20 / _total)
  )
end
