; SPDX-FileCopyrightText: 2022-2023 Universit√§t Hamburg
; SPDX-FileCopyrightText: 2022-2023 Helmholtz-Zentrum hereon GmbH
; SPDX-License-Identifier: Apache-2.0
; SPDX-FileContributor: Sascha Hokamp <sascha.hokamp@uni-hamburg.de>
; SPDX-FileContributor: Carsten Lemmen <carsten.lemmen@hereon.de>

breed [amphidromes amphidrome]

amphidromes-own [
  ; the synodal month (full moon to full moon) has a 29.52 day period
  ; double the frequency to obtain spring-neap effects from in-line and
  ; orthogonal constellation of Sun-Earth-Moon, and M2 semidiurnal.
  spring-neap-period
  m2-period
]

to setup-maps

  no-display
  let _patches nobody

  gis:load-coordinate-system "../data/wgs1984.prj"
  let bathymetry-dataset gis:load-dataset "../data/gebco/gebco_2021_n56.0_s53.0_w2.0_e10.0.asc"

  ;new crangon dataset (no summer and winter change anymore but year around data)
  ;for the solea and platessa only the biomass of fish > minimum conservation reference sizes (MCRS) is introduced
  let crangon-summer-dataset gis:load-dataset "../data/thuenen/dis.crangon.min.max.asc"
  let crangon-winter-dataset gis:load-dataset "../data/thuenen/dis.crangon.min.max.asc"
  let platessa-summer-dataset gis:load-dataset "../data/thuenen/dis.pleuronectes.platessa.27.max.asc"
  let platessa-winter-dataset gis:load-dataset "../data/thuenen/dis.pleuronectes.platessa.27.max.asc"
  let solea-summer-dataset gis:load-dataset "../data/thuenen/dis.solea.24.max.asc"
  let solea-winter-dataset gis:load-dataset "../data/thuenen/dis.solea.24.max.asc"

  ; Set the world envelope to the union of all of our dataset's envelopes, if it has not been
  ; set before
  ifelse (not is-list? gis-envelope or length gis-envelope != 4) [
    gis:set-world-envelope (gis:envelope-union-of (gis:envelope-of bathymetry-dataset)
;                                                (gis:envelope-of crangon-summer-dataset)
;                                               (gis:envelope-of crangon-winter-dataset)
;                                                (gis:envelope-of platessa-summer-dataset)
;                                                (gis:envelope-of platessa-winter-dataset)
;                                                (gis:envelope-of solea-summer-dataset)
;                                                (gis:envelope-of solea-winter-dataset)
    )
    set gis-envelope gis:world-envelope
  ][ gis:set-world-envelope-ds gis-envelope]

  print (word "Setting up GIS system within bounds " gis:world-envelope)

  ; To set the amphidromic points, all that is needed is the gis-envelope
  setup-amphidromes

  gis:apply-raster bathymetry-dataset depth

  ; The following removes NaN values which are not allowed
  ; and convert from bathymetry to depth
  ask patches with [not (depth < 0 or depth > -1) ] [ set depth 9999 ]
  ask patches [ set depth ( - depth)]

  calc-accessibility
  calculate-distance-to-coast

  gis:apply-raster crangon-summer-dataset crangon-summer
  ask patches with [not (crangon-summer < 0 or crangon-summer > -1) ] [ set crangon-summer -9999 ]

  ; Creep-fill with nearest neighbor with 50%
  set _patches patches with [crangon-summer < 0 and accessible?]
  repeat max-pxcor * 2 [
    ask _patches [
      let _neighbors neighbors with [crangon-summer >= 0]
      if any? _neighbors [
        set crangon-summer  0.5 * mean [crangon-summer] of _neighbors
      ]
    ]
    set _patches patches with [crangon-summer < 0 and depth > 0]
  ]

  gis:apply-raster crangon-winter-dataset crangon-winter
  ask patches with [not (crangon-winter < 0 or crangon-winter > -1) ] [ set crangon-winter -9999 ]


  ; Creep-fill with nearest neighbor
  set _patches patches with [crangon-winter < 0 and accessible?]
  repeat max-pxcor * 2 [
    ask _patches [
      let _neighbors neighbors with [crangon-winter >= 0]
      if any? _neighbors [
        set crangon-winter  0.5 * mean [crangon-winter] of _neighbors
      ]
    ]
    set _patches patches with [crangon-winter < 0 and depth > 0]
  ]


  gis:apply-raster solea-summer-dataset solea-summer
  ask patches with [not (solea-summer < 0 or solea-summer > -1) ] [ set solea-summer -9999 ]
  set _patches patches with [solea-summer < 0 and accessible?]
  repeat max-pxcor * 2 [
    ask _patches [
      let _neighbors neighbors with [solea-summer >= 0]
      if any? _neighbors [
        set solea-summer  0.5 * mean [solea-summer] of _neighbors
      ]
    ]
    set _patches patches with [solea-summer < 0 and depth > 0]
  ]

  gis:apply-raster solea-winter-dataset solea-winter
  ask patches with [not (solea-winter < 0 or solea-winter > -1) ] [ set solea-winter -9999 ]
  set _patches patches with [solea-winter < 0 and accessible?]
  repeat max-pxcor * 2 [
    ask _patches [
      let _neighbors neighbors with [solea-winter >= 0]
      if any? _neighbors [
        set solea-winter 0.5 * mean [solea-winter] of _neighbors
      ]
    ]
    set _patches patches with [solea-winter < 0 and depth > 0]
  ]

  gis:apply-raster platessa-summer-dataset platessa-summer
  ask patches with [not (platessa-summer < 0 or platessa-summer > -1) ] [ set platessa-summer -9999 ]
  set _patches patches with [platessa-summer < 0 and accessible?]
  repeat max-pxcor * 2 [
    ask _patches [
      let _neighbors neighbors with [platessa-summer >= 0]
      if any? _neighbors [
        set platessa-summer 0.5 * mean [platessa-summer] of _neighbors
      ]
    ]
    set _patches patches with [platessa-summer < 0 and accessible?]
  ]

  gis:apply-raster platessa-winter-dataset platessa-winter
  ask patches with [not (platessa-winter < 0 or platessa-winter > -1) ] [ set platessa-winter -9999 ]
  set _patches patches with [platessa-winter < 0 and accessible?]
  repeat max-pxcor * 2 [
    ask _patches [
      let _neighbors neighbors with [platessa-winter >= 0]
      if any? _neighbors [
        set platessa-winter 0.5 * mean [platessa-winter] of _neighbors
      ]
    ]
    set _patches patches with [platessa-winter < 0 and accessible?]
  ]

  ask patches [
    set area gis-patch-area
    set patch-monthly-effort-hours n-values 12 [ i -> 0]
    set patch-monthly-effort-mwatthours n-values 12 [ i -> 0]
    set patch-monthly-swept-area n-values 12 [ i -> 0]
  ]

  update-owf

  ; add traffic data
  show-dataset "Traffic"
  ask patches [ set traffic-suitability 1 ]
  ;ask patches with [temporary > 100] [ set traffic-suitability exp (- (temporary - 100) / 100)  ]
  ;ask patches with [temporary > 100] [ set traffic-suitability 0.01  ]
  ask patches with [temporary > 150] [ set traffic-suitability 0.1  ]

end

to update-owf

  set owf-dataset load-dataset "OWF"

  let _owf-properties gis:property-names owf-dataset
  let _owf-list (list)
  let _year time:get  "year" date

  ; Use the existing "SHAPE_AREA" property to manipulate and filter data,
  ; by default set all to zero
  foreach gis:feature-list-of owf-dataset [ f ->
    gis:set-property-value f "SHAPE_AREA" 0
  ]

  ifelse  (_year > 2025) [
    set _owf-list (sentence
      gis:find-features owf-dataset "STATUS" "Production"
      gis:find-features owf-dataset "STATUS" "Construction"
      gis:find-features owf-dataset "STATUS" "Planned"
    )
  ][
    set _owf-list (sentence
      gis:find-features owf-dataset "STATUS" "Production"
      gis:find-features owf-dataset "STATUS" "Construction"
    )
    set _owf-list filter [ f -> gis:property-value f "year" <= year ] _owf-list

  ]

  ; Use the filtered list to set the shape area property and that area
  ; to calculate frational coverage
  foreach _owf-list [ f ->  gis:set-property-value f "SHAPE_AREA"  1 ]
  gis:apply-coverage owf-dataset "SHAPE_AREA" owf-fraction

  ask patches with [not (owf-fraction < 0 or owf-fraction > -1) ] [ set owf-fraction 0 ]


end

; EmodNet provides human activities at https://www.emodnet-humanactivities.eu/download-data.php.
; After providing your country and sector, the wind farm polygon areas are freely available.
to show-windfarms

  ;foreach gis:feature-list-of owf-dataset [
  ;  this-owf-vector-feature -> gis:set-property-value this-owf-vector-feature "POWER_MW" read-from-string gis:property-value this-owf-vector-feature "POWER_MW"
  ;]

  gis:apply-coverage owf-dataset "POWER_MW" owf-fraction
  ask patches with [not (owf-fraction < 0 or owf-fraction > -1) ] [ set owf-fraction 0 ]

  gis:set-drawing-color red
  gis:draw owf-dataset 1

end

to load-plaice-box
  let _dataset  gis:load-dataset "../data/plaicebox/DB_PlaiceBox_WGS84_vTIwi_Jan2001_G.shp"
  ask patches gis:intersecting _dataset [ set plaice-box? true ]

  gis:set-drawing-color blue - 3
  gis:draw _dataset 1
end


to draw-dataset [_dataset-name _color]
  gis:set-drawing-color _color
  gis:draw load-dataset _dataset-name 1
end

; This routines displays additional data not generated by the model but
; sourced from third-party data
to show-dataset [_dataset-name]

  if any? legends [ask legends [die]]
  if any? legend-entries [ask legend-entries [die]]
  let n scene-legend-n
  let _qt nobody
  let _values nobody
  let _patches nobody
  let _colors nobody
  let _min 0
  let _area-factor area-factor
  let _unit ""
  let _days days-in-past-year

  print _area-factor
  ask patches [set pcolor grey - 2]
  ask water-patches [set pcolor grey]

  if _dataset-name = "EMODnet effort" [
    let _dataset gis:load-dataset "../data/emodnet/fishingbeamtrawlsPolygon.shp"
    gis:apply-coverage  _dataset "MW_FSHN" temporary
    ; Remove NaN
    ask water-patches with [(not (temporary > 0)) and (not (temporary < 1)) ] [set temporary 0]
    ; Original unit is MWh per 0.05x0.05 grid cell area, we correct this by the
    ; area-factor (conversion to actual grid resolution, and by area
    ask water-patches [set temporary temporary * _area-factor / area]
    set _unit "MWh a-1 km-2"
    set _qt (list  10 50 100 150 200) ; 250 300 350 400)
    set n (length _qt) - 1
    set _colors palette:scheme-colors "Sequential" "Oranges" n
  ]

  if _dataset-name = "GFW effort" [
    let _dataset gis:load-dataset "../data/gfw/fishing_hours_2019_20_de.asc"
    gis:apply-raster _dataset temporary
    ask water-patches with [(not (temporary > 0)) and (not (temporary < 1)) ] [set temporary 0]
    ; Original unit is h per 0.05x0.05 grid cell area
    ask water-patches [set temporary temporary * _area-factor / area]
    set _unit "h a-1 km-2"
    set _qt (list 1 10 50 100 250 400 600  800 1000)
    set n (length _qt) - 1
    set _colors palette:scheme-colors "Sequential" "Oranges" n
  ]

  if _dataset-name = "Effort MWh" and ticks > 0 and _days > 0 [
    ask water-patches [set temporary 365.25 / _days *  sum patch-monthly-effort-mwatthours / area]
    set _unit "MWh a-1 km-2"
    set _qt (list  10 50 100 150 200) ; 250 300 350 400)
    set _min 0
    set n (length _qt) - 1
    set _colors palette:scheme-colors "Sequential" "Oranges" n
  ]

  if _dataset-name = "Effort h" and ticks > 0 and _days > 0 [
    ask water-patches [set temporary 365.25 / _days *  sum patch-monthly-effort-hours / area]
    set _unit "h a-1 km-2"
    set _qt (list 1 10 50 100 250 400 600  800 1000)
    set _min 0
    set n (length _qt) - 1
    set _colors palette:scheme-colors "Sequential" "Oranges" n
  ]

  if _dataset-name = "SAR" and ticks > 0 and _days > 0 [
    ask water-patches [set temporary 365.25 / _days *  sum patch-monthly-swept-area / area]
    set _unit ""
    ;set _values sort [ temporary ] of water-patches
    ;set _qt quantile-thresholds _values n
    set _qt (list 0.01 0.1 0.5 1.0 5.0 20.0 100.0 )
    set _min 0.01
    set n (length _qt) - 1
    set _colors palette:scheme-colors "Sequential" "Oranges" n
  ]

  if _dataset-name = "Bathymetry" [
    ask water-patches [set temporary depth]
    set _unit "m"
    set _qt (list 0 1 2 5 10 20 30 40  80)
    set n (length _qt) - 1
    set _colors palette:scheme-colors "Sequential" "Blues" n
  ]

  if _dataset-name = "Depth" [
    calculate-tidal-depth
    set _qt (list 0 1 2 5 10 20 30 40  80)
    set _unit "m"
    set n (length _qt) - 1
    set _colors palette:scheme-colors "Sequential" "Blues" n
  ]

  if _dataset-name = "Traffic" [
    let _dataset gis:load-dataset "../data/emodnet/EMODnet_HA_cargo-all_europe-yearly-2021.asc"
    ; Density is expressed as hours per square kilometre per month
    set _unit "h km-2 month-1"
    gis:apply-raster  _dataset temporary
    set _qt (list 1 10 50 100 250 400 600  800 1000)
    set n (length _qt) - 1
    set _colors palette:scheme-colors "Sequential" "Blues" n
  ]

  if _dataset-name = "Suitability" [
    ask water-patches [set temporary traffic-suitability]
    set _values sort [ temporary ] of water-patches
    set _qt (list 0.001 0.01 0.1 0.5 1.0)
    set n (length _qt) - 1
    set _colors palette:scheme-colors "Sequential" "Blues" n
  ]


  if _dataset-name = "Shrimp" [
    ask water-patches [set temporary crangon]
    set _unit "kg km-2"
    set _qt (list 1 10 50 100 250 400 600 800 1000)
    set n (length _qt) - 1
    set _colors palette:scheme-colors "Sequential" "Reds" n
  ]

  if _dataset-name = "Sole" [
    ask water-patches [set temporary solea]
    set _unit "kg km-2"
    set _qt (list 1 10 50 100 250 400 600 800 1000)
    set n (length _qt) - 1
    set _colors palette:scheme-colors "Sequential" "Reds" n
  ]

  if _dataset-name = "Plaice" [
    ask water-patches [set temporary platessa]
    set _unit "kg km-2"
    set _qt (list 1 10 50 100 250 400 600 800 1000)
    set n (length _qt) - 1
    set _colors palette:scheme-colors "Sequential" "Reds" n
  ]

  if _dataset-name = "Shore proximity" [
    ask water-patches [ set temporary distance-to-coast ]
    set _unit "km"
    set _qt (list 0 1 2 5 10 15 20 30 40 80)
    set n (length _qt) - 1
    set _colors palette:scheme-colors "Sequential" "Oranges" n
  ]

  if _dataset-name = "Port proximity" [
    ask water-patches [ set temporary distance-to-port ]
    set _unit "km"
    set _qt (list 0 1 2 5 10 15 20 30 40 80)
    set n (length _qt) - 1
    set _colors palette:scheme-colors "Sequential" "Oranges" n
  ]

  if _dataset-name = "Area" [
    ask water-patches [ set temporary area ]
    set _unit "km2"
    set _values sort [ temporary ] of water-patches
    set _qt quantile-thresholds _values n
    set _colors palette:scheme-colors "Sequential" "Oranges" n
  ]

  if _dataset-name = "Accessibility" [
    ask water-patches [ set temporary boolean2int accessible? ]
    set _qt (list 0 1)
    set n (length _qt) - 1
  ]

  if _dataset-name = "Plaicebox" [
    ask water-patches [ set temporary boolean2int (accessible? and not plaice-box?)]
    set _qt (list 0 1)
    set n (length _qt) - 1
  ]

  if _dataset-name = "OWF" [
    ask water-patches [ set temporary owf-fraction ]
    set _qt (list -1 0.2 0.5 0.8 1.0)
    set n (length _qt) - 1
    set _colors palette:scheme-colors "Sequential" "Blues" n
  ]

  if _dataset-name = "Value" [
    ask water-patches [ set temporary 0 ]

    let _cost-per-km (mean [boat-fuel-consumption] of boats) * oil-price / 100  + wage / (mean [boat-steaming-speed] of boats)

    foreach sort-on [who] ports [ p ->
      ask water-patches [
        let _distance  gis-scale * distance p
        set temporary temporary + crangon-summer * 7 * area - _distance * _cost-per-km
      ]
    ]

    set _values sort [ temporary ] of water-patches
    set _qt quantile-thresholds _values n
    set _colors palette:scheme-colors "Sequential" "Blues" n
  ]


  if _dataset-name = "Tide" [
    calculate-tidal-depth
    set _unit "m"
    ask water-patches with [temporary > -9999][ set temporary (temporary - depth)]
    ;set _values sort [ temporary ] of water-patches
    ;set _qt quantile-thresholds _values n
    set _qt n-values 9 [ i -> i / 2 - 2 ]
    set n (length _qt) - 1
    set _colors palette:scheme-colors "Divergent" "RdBu" n
    set _min min _qt
  ]

  if _dataset-name = "Action" and any? actions [
    ask water-patches [set temporary -9999]
    let _max max  [count actions-here] of water-patches
    ask water-patches with [any? actions-here] [ set temporary count actions-here]
    set _values sort [ temporary ] of water-patches with [any? actions-here]

    let _uvalues unique _values
    set n min (list n length _uvalues)
    set _qt quantile-thresholds _uvalues n
    ifelse n > 2 [set _colors palette:scheme-colors "Sequential" "Greens" n][set _colors (list red blue)]
  ]

  if _dataset-name = "Catch" [
    ask water-patches [set temporary -9999]
    set _unit "kg km-2"
    ask water-patches with [any? actions-here] [
      set temporary mean [action-catch] of actions-here / area
    ]
    set _values sort [ temporary ] of water-patches with [any? actions-here]
    set _qt quantile-thresholds _values n
    set _colors palette:scheme-colors "Sequential" "Reds" n
  ]

  carefully [
    ask water-patches with [not (temporary < _min or temporary > _min - 1) ] [ set temporary 0 ]
  ][]
  carefully [
    ask patches with [not (temporary < _min or temporary > _min - 1) ] [ set temporary -9999 ]
  ][]

  set _patches [self] of water-patches with [temporary >= _min]

  set _values (map [ p -> [temporary] of p ] _patches )

  if _qt = nobody [ set _qt quantile-thresholds _values n ]

  set _values quantile-scale-new _qt _values

  ifelse n > 2 and _colors != nobody and _qt != nobody [
    foreach  (range length _patches) [ i ->
      ask item i _patches [
        set pcolor palette:scale-gradient _colors (item i _values) 0 1
      ]
    ]
    draw-legend _colors (n-values (n + 1) [ i -> formatted-number (item i _qt) 5])
    set-legend-title (list _dataset-name _unit)
  ][
    foreach  (range length _patches) [ i ->
      ask item i _patches [
        set pcolor scale-color blue temporary 1 0
      ]
    ]
  ]

end

to save-static-dataset [_dataset-name]
  no-display
  show-dataset _dataset-name
  let _name lower _dataset-name
  set _name replace-pattern _name " -" "_"
  export-view (word "./results/" _name ".png")
  gis:store-dataset gis:patch-dataset temporary (word "./results/" _name)
end

to save-dynamic-dataset [_dataset-name]
  no-display
  show-dataset _dataset-name
  let _name lower _dataset-name
  set _name replace-pattern _name " -" "_"
  let _ticks ifelse-value ticks > 0 [ ticks ][ 0 ]
  export-view (word "results" "/" _name "_"  (formatted-int _ticks 4) "_" datetime-short ".png")
  gis:store-dataset gis:patch-dataset temporary (word "results" "/" _name "_"  (formatted-int _ticks 4) "_" datetime-short)
end

to save-static-datasets
  no-display
  let _static (list "Traffic" "Bathymetry" "EMODnet TBB effort" "Area" "Shore proximity" "Shrimp" "Plaice"
    "Sole" "OWF" "Accessibility" "Plaicebox"
  )

  foreach _static [
    s -> save-static-dataset s
  ]
end

to save-dynamic-datasets
  no-display
  let _dynamic (list "Effort" "Depth" "Tide" "Action" "Catch")

  foreach _dynamic [ s -> save-dynamic-dataset s]
end

to-report load-dataset [_dataset-name]

  if _dataset-name = "Natura2000" [ report gis:load-dataset "../data/natura2000/northsea/MPA_NorthSea_Shapes.shp"]
  if _dataset-name = "NP" [ report gis:load-dataset "../data/nlwkn/NLP/Nationalparke_DTK25.shp"]
  if _dataset-name = "ICES" [ report gis:load-dataset "../data/ices/ICES_Statistical_Rectangles_Eco.shp"]
  if _dataset-name = "EEZ" [ report gis:load-dataset "../data/eez/eez.shp"]
  if _dataset-name = "Plaicebox" [ report gis:load-dataset "../data/plaicebox/DB_PlaiceBox_WGS84_vTIwi_Jan2001_G.shp"]
  if _dataset-name = "OWF" [ report gis:load-dataset "../data/emodnet/EMODnet_HA_Energy_WindFarms_pg_20230605.shp"]
  if _dataset-name = "SNS" [ report gis:load-dataset "../data/coastline/sns_waterbody.shp"]
  if _dataset-name = "3mile" [ report gis:load-dataset "../data/vliz/de_internal_waters_v3.shp"]

  print (sentence "Invalid dataset name" _dataset-name ".  Valid are 'Natura2000', 'NP', 'ICES', 'Plaicebox', 'EEZ', 'OWF', 'SNS', '3mile' ")
  report nobody
end

to-report __test-load-dataset
  if load-dataset "Natura2000" = nobody [report false]
  if load-dataset "NP" = nobody [report false]
  if load-dataset "ICES" = nobody [report false]
  if load-dataset "EEZ" = nobody [report false]
  if load-dataset "Plaicebox" = nobody [report false]
  if load-dataset "OWF" = nobody [report false]
  if load-dataset "SNS" = nobody [report false]
  if load-dataset "3mile" = nobody [report false]
  report true
end

to-report  __test-draw-dataset

  foreach (list "Natura2000" "NP" "ICES" "EEZ" "Plaicebox" "OWF" "SNS") [ i ->
    draw-dataset i 5 + 10 * (random 14)
  ]
  report true
end

; The `import-wms-drawing` primitive asks a server (in this case one run by
; terrestris.de, a german GIS company that offers a WMS for the public)
; for the section of the map within the current world envelope
; and then draws it to the screen.
;
; In addition to the url of the WMS server, you must also supply the EPSG code
; for the projection you want to use and the name of the layer you want to grab
; from that server as well as a transparency parameter from 0 to 255.
; If you do not know what EPSG code to use, 4326, the code for WGS84, should
; provide good-enough results.
to draw-background [X]

  if member? X  (list "OSM" "SAR" "CHL") [ clear-drawing]

  carefully [
    if X = "OSM" [gis:import-wms-drawing "https://ows.terrestris.de/osm/service?" "EPSG:4326" "OSM-WMS" 200]
    if X = "SAR" [gis:import-wms-drawing "https://hub.hereon.de/server/services/NOAH_geoDB/TI_SARnested/MapServer/WMSServer?" "EPSG:4326" "0" 100]
    if X = "CHL" [gis:import-wms-drawing "https://hub.hereon.de/server/services/MOSSCO/MOSSCO_chlorophyll/MapServer/WmsServer?" "EPSG:4326" "0" 200]
  ][
    show word "Could not load " X
  ]

end

; This procedure is very costly.
to calculate-distance-to-coast
  let _land-patches patches with [depth <= -1]
  let _coast-patches _land-patches with [ max [depth] of neighbors4 > 0]

  ask water-patches  [
    let _coast-patch min-one-of _coast-patches [distance myself]
    set distance-to-coast gis-envelope-distance (patch-set self _coast-patch)
  ]
  ask _land-patches  [
    let _coast-patch min-one-of _coast-patches [distance myself]
    set distance-to-coast gis-envelope-distance (patch-set self _coast-patch)
  ]
end

to calculate-distance-to-port
  ask patches  [
    let _port min-one-of ports [distance myself]
    let _patch [patch-here] of _port
    set distance-to-port gis-envelope-distance (patch-set self _patch)
  ]
end

to setup-amphidromes
  ; create the amphidromic point, artificially move it to adjust to
  ; world envelope
  if (not is-list? gis-envelope or length gis-envelope != 4) [
    error (word "To set up the amphidromic points, you need to define the GIS envelope")
  ]

  create-amphidromes 1 [
    set hidden? true

    let _xy gis:project-lat-lon (min (list 55.5 (item 3 gis-envelope - 0.1))) (max (list 5.1 item 0 gis-envelope))
    if (not is-list? _xy) [
      error (word "Error in projecting " gis-envelope " to model domain ")
    ]
    setxy item 0 _xy item 1 _xy
    set label "amphidrome"
    set spring-neap-period 29.52 * 24 / 2 ; half a synodal month, in hours
    set m2-period 12.4167  ; lunar semidiurnal tide, in hours
  ]
end

to calculate-tidal-depth
  ; the synodal month (full moon to full moon) has a 29.52 day period, get a phase for this,
  ; double the frequency to obtain spring-neap effects
  let _amphidrome one-of amphidromes

  let _spring-neap-phase ((time:get "minutes" datetime / 60.0) + time:get "hours" datetime + 24 * time:get "dayofyear" datetime + 365.25 * time:get "year" datetime)  / ([spring-neap-period] of _amphidrome)  * 360
  let _spring-neap-range sin _spring-neap-phase

  ; assume 12.4167 lunar semidurnal (M2) tide, and convert from hours to degree, than add heading
  let _m2-phase ((time:get "minutes" datetime / 60.0) + time:get "hours" datetime + 24 * time:get "dayofyear" datetime + 365.25 * time:get "year" datetime)  / ([m2-period] of _amphidrome) * 360

  ; water patches with insufficient depth only
  ask water-patches [set temporary -9999]
  ask water-patches with [depth < 10] [
    ;let _coords gis:envelope-of (self)
    ;let _distance haversine-distance (list 5.1 ((item 0 _coords + item 1 _coords) / 2) 55.5 ((item 2 _coords + item 3 _coords) / 2))
    ; Distance amphidromic point to Cuxhaven is 260 km, and tidal range there is about 2.9 m, so linear model gives

    let _distance gis-envelope-distance (patch-set [patch-here] of _amphidrome self)
    let _range _distance / 260.0 * 2.9

    ; At Cuxhaven the neap tide has about 25% less range than the spring tide, so let's modulate the range
    set _range _range * (1 + 0.25 * _spring-neap-range)

    ask _amphidrome [face myself]
    set temporary  depth + _range / 2 * sin ( _m2-phase + [heading] of _amphidrome )
  ]
end

; This is a patch procedure that is called every 1st of the month
; and updates the time global and monthly storage
to reset-monthly
  let _imonth time:get "month" date - 1
  set  patch-monthly-effort-hours replace-item _imonth patch-monthly-effort-hours 0
  set  patch-monthly-effort-mwatthours replace-item _imonth patch-monthly-effort-mwatthours 0
  set  patch-monthly-swept-area replace-item _imonth patch-monthly-swept-area 0
end
