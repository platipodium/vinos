; SPDX-FileCopyrightText: 2022-2023 Universität Hamburg
; SPDX-FileCopyrightText: 2022-2024 Helmholtz-Zentrum hereon GmbH
; SPDX-License-Identifier: Apache-2.0
;
; SPDX-FileContributor: Carsten Lemmen <carsten.lemmen@hereon.de>
; SPDX-FileContributor: Sascha Hokamp <sascha.hokamp@uni-hamburg.de>
; SPDX-FileContributor: Jieun Seo <jieun.seo@studium.uni-hamburg.de>

extensions [
  gis
  csv
  profiler
  palette
  bitmap
]

globals [
  navigable-depth                    ; minimum depth where a boat can navigate
  min-fresh-catch                    ; wether the boat decides togo back to harbor, maybe change name

  sum-ports-total-landings-kg        ; overall sum of total landings per period
  percentage-landings-kg             ; percentage of other landing over total landings per period
  sum-ports-crangon-landings-euro    ; overall sum of landings of crangon per period in EUR 2015
  sum-ports-platessa-landings-euro   ; overall sum of landings of platessa per period in EUR 2015
  sum-ports-solea-landings-euro      ; overall sum of landings of solea per period in EUR 2015
  sum-ports-crangon-landings-kg      ; overall sum of landings of crangon per period in kg
  sum-ports-platessa-landings-kg     ; overall sum of landings of platessa per period in kg
  sum-ports-solea-landings-kg        ; overall sum of landings of solea per period in kg
  sum-boats                          ; overall boats of all ports

  owf-dataset                        ; Off-shore wind farms

  year month day                     ; time frame
  day-of-year
  days-in-months

  home-ports                         ; agentset of breed ports

  scene-legend-n
  scene-legend-thresholds
  date-patch
  temp
  patch-prey-names

  water-patches

  fleet-monthly-hours              ; model diagnostic of the 12 recently simulated months' seahours
  fleet-monthly-effort-hours       ; model diagnostic of the 12 recently simulated month's efforts
  fleet-monthly-effort-mwatthours  ; model diagnostic of the 12 recently simulated month's efforts
  fleet-monthly-landing            ; model diagnostic of the 12 recently simulated months' landings
  fleet-monthly-revenue            ; model diagnostic of the 12 recently simulated months' revenue
  fleet-monthly-fuel               ; model diagnostic of the 12 recently simulated months' fuel consumption

  fleet-landing-climatology        ; observational data from Temming et al. https://doi.org/10.3354/meps12325
]

patches-own [

  ; Prey biomasses
  patch-prey-biomasses   ; current biomasses of the prey species

  crangon-summer                    ; data from TI @todo convert to vector of prey species
  crangon-winter
  platessa-summer
  platessa-winter
  solea-summer
  solea-winter

  ; Environmental boundary data
  pollution-exceedance

  depth
  owf-fraction
  accessible?                     ; false if not accessible to fishery for steaming
  unrestricted?                   ; false if close to port, too shallow, restricted area
  plaice-box?
  patch-only-nephrops?            ; true if in nephrops reservation area

  ; Diagnostics
  prey-catches                      ; annual prey catches
  cluster-fishing-efforts           ; fishing effort by cluster in hours
  cluster-prey-catches              ; preys caught by cluster
  area                              ; area of the patch
  distance-to-coast                 ; distance to nearest land
  distance-to-port                  ; distance to nearest port
  traffic-suitability               ; relative suitability due to traffic

  temporary                         ; temporary variable storage

  ; Monthly diagnostic storage
  patch-monthly-effort-hours
  patch-monthly-effort-mwatthours
  patch-monthly-swept-area
]

; ------------------------------------------------------------------------------------------
; The startup procedure is called when the model is opened by NetLogo.  This automates
; the execution of setup.  We use a fixed random seed to enable replicable simulations
to startup
  license-message
  random-seed 123456789
  setup
end


to setup
  clear-all

  ; First setup up the calendar.  The routine setup-calendar checks for
  ; existing date, if there is none, it sets to wall time +/- offset
  ; specified in slider
  set date nobody
  setup-calendar

  setup-globals

  setup-preys
  setup-gears ; gears depend on preys

  setup-maps

  calc-pollution
  calc-fish

  setup-ports
  calc-initial-values
  calculate-distance-to-port

  setup-boats
  setup-monthly

  setup-plots

  set scene-legend-n 9
  update-scene
  update-drawings
  setup-logo
  display

  setup-hubnet

  reset-ticks
end

; this procedures resets all sliders to a reasonable default value
to setup-defaults
  set memory-size 25
  set adaptation 0.6
  set time-offset -92 ; months from today
  set oil-price 62 ; ct l-1
  set wage 80 ; € h-1
end


to setup-globals
  set min-fresh-catch 10
  set navigable-depth 2
  set boat-property-chooser "distance-at-sea"
  set scene "Bathymetry"
  setup-date-patch

  set fleet-landing-climatology (list 1.5 1.3 5.5 11 9 9 9 10.5 14 15 11.5 3.5)
end

to setup-date-patch
  set date-patch patch (max-pxcor - 8) (min-pycor + 2)
  update-date-patch
end

to setup-logo
  let _logo  bitmap:import "../assets/logo-mussel.png"
  set _logo bitmap:scaled _logo ( 0.5 * bitmap:width _logo) (0.5 * bitmap:height _logo)
  bitmap:copy-to-drawing _logo 0.01 * max-pxcor  2.65 * max-pycor
end

;-----------------------
to update-date-patch
  ask date-patch [
    set plabel-color ifelse-value storm? [blue + 3][
      ifelse-value holiday? [red + 3][
        ifelse-value ramadan? [yellow][white]
      ]
    ]
    set plabel datetime-string
  ]
end

to go

  advance-calendar
  update-date-patch

  ; Every new year recompute exclusion area from OWF
  if (time:get "dayofyear" date = 1) [ calc-accessibility ]

  ;let _total-prey-landed sum ([port-prey-landed] of ports)
  ; Todo: adjust price, leave for next version
  ; preis = a - b * h
  ; set price price - sum_boats (catch) * price-sensitivity

  calc-fish
  ;let _active-boats n-of 10 boats
  let _active-boats boats

  ; Enable a simulation with only one active boat that can be closely
  ; followed.  This is off by default
  ifelse one? [
    set _active-boats min-n-of 1 (boats with [boat-logbook != 0 ]) [who]
    let _boat one-of _active-boats

    if subject != _boat [
      ;watch _boat
      ;inspect _boat
    ]
  ][
    if subject != nobody [
      stop-inspecting subject
      ; need to unwatch, too
    ]
  ]

  let _boats _active-boats with [boat-hour < 24]
  while [count _boats > 0] [
    let _boats-in-phase _boats with [boat-trip-phase = 5]
    if any? _boats-in-phase [
      ;print (word "  .. landing " count _boats-in-phase " boats ..")
      ask _boats-in-phase [boat-land-port]
    ]
    set _boats-in-phase _boats with [boat-trip-phase = 4]
    if any? _boats-in-phase [
      ;print (word "  .. sending home " count _boats-in-phase " boats ..")
      ask _boats-in-phase [boat-return-port]
    ]
    set _boats-in-phase _boats with [boat-trip-phase = 3]
    if any? _boats-in-phase [
      ;print (word "  .. actively fishing " count _boats-in-phase " boats ..")
      ask _boats-in-phase [boat-make-haul]
    ]
    set _boats-in-phase _boats with [boat-trip-phase = 2]
    if any? _boats-in-phase [
      ;print (word "  .. choosing new start " count _boats-in-phase " boats ..")
      ask _boats-in-phase [boat-choose-start]
    ]
    set _boats-in-phase _boats with [boat-trip-phase = 1]
    if any? _boats-in-phase [
      ;print (word "  .. leaving port " count _boats-in-phase " boats ..")
      ask _boats-in-phase [boat-leave-port]
    ]
    set _boats-in-phase _boats with [boat-trip-phase = 0]
    if any? _boats-in-phase [
      ;print (word "  .. resting " count _boats-in-phase " boats ..")
      ask _boats-in-phase [boat-rest-port]
    ]
    set _boats _active-boats with [boat-hour < 24]
  ]
  ask boats [ set boat-hour boat-hour - 24 ]

  update-plots
  update-scene
  ;update-drawings
  update-actions
  update-output   ; updates the output diagnostics, see output.nls
  update-logbooks

  export-data
  save-totals

  listen-clients
  tick
end

to calc-initial-values
  set sum-boats sum [sum port-clusters] of ports
end


;---------------------------------


to-report displayed
  report scene
end

to update-scene


  if any? legends [ask legends [die]]
  if any? legend-entries [ask legend-entries [die]]
  let n scene-legend-n

  ask water-patches [set plabel ""]

  carefully [show-dataset scene][print (word "Warning, scene " scene " cannot be displayed")]

  display
  if show-values? [show-values]
end

to update-scene-legend

  ; Create a background for drawing the legend
  ask patches with [pxcor >= min-pxcor + 2 and pxcor <= min-pxcor + 20
       and pycor > max-pycor - 22 - 3 * scene-legend-n and pycor < max-pycor - 20][set pcolor grey]

  let scene-legend-colors palette:scheme-colors "Sequential" "Reds" scene-legend-n

  if any? legends [ask legends [die]]
  foreach range scene-legend-n [ i ->
    create-legends 1 [
         set shape "square"
         set size 3
         setxy min-pxcor + 4  max-pycor - 20 - 3 * scene-legend-n + 1  + 3 * i
         set color item i scene-legend-colors
    ]
    create-legends 1 [
         set shape "square"
         set size 0.1
         setxy min-pxcor + 4 + 13 max-pycor - 20 - 3 * scene-legend-n + 1 + 3 * i - 1
         set label-color black ; if you want to color it, use item i scene-legend-colors
         set label formatted-number (item i scene-legend-thresholds) 5
    ]
  ]
end

; This is a dummy procedure and needs to be replace by actual pollution data.
to calc-pollution
  ask n-of 100 patches with [platessa > 0] [set pollution-exceedance random-float 2.0]
end

to-report grayscale [x]
  report (round (10 * (x mod 10))) / 10
end

; Patch procedures crangon, solea, and platessa report the seasonally-weighted
; area concentration of the three species calculated from their winter and summer
; values and weighted by day of year
to-report crangon
  let _correction-factor 1800
  let _resupply 0.01 ; 100% replacement in 100 days

  ifelse (is-list? patch-prey-names and is-list? patch-prey-biomasses)  [
    let _prey-index position "Shrimp" patch-prey-names
    report _resupply * _correction-factor * (
      (summer-weight * crangon-summer + (1 - summer-weight) * crangon-winter )
    ) +  (1 - _resupply) * item _prey-index patch-prey-biomasses
  ][
    report _correction-factor * (
      (summer-weight * crangon-summer + (1 - summer-weight) * crangon-winter )
    )
  ]
end

to-report solea
  let _correction-factor 15
  let _resupply 0.2

  ifelse (is-list? patch-prey-names and is-list? patch-prey-biomasses)  [
    let _prey-index position "Sole" patch-prey-names
    report _resupply * _correction-factor * (
      (summer-weight * solea-summer + (1 - summer-weight) * solea-winter )
    ) + (1 - _resupply) * item _prey-index patch-prey-biomasses
  ][
    report _correction-factor * (
      (summer-weight * solea-summer + (1 - summer-weight) * solea-winter )
    )
  ]
end

to-report platessa
  let _correction-factor 5
  let _resupply 0.2

  ifelse (is-list? patch-prey-names and is-list? patch-prey-biomasses)  [
    let _prey-index position "Plaice" patch-prey-names
    report _resupply  * _correction-factor * (
      (summer-weight * platessa-summer + (1 - summer-weight) * platessa-winter )
    ) + (1 - _resupply) * item _prey-index patch-prey-biomasses
  ][
    report _correction-factor * (
      (summer-weight * platessa-summer + (1 - summer-weight) * platessa-winter )
    )
  ]
end

to-report summer-weight
  let seasonal-mean-weight 0.5
  let seasonal-weight-range 1
  let day-variation-range 0

  ;; Define seasonal signal with 120 day shift
  ;; (i.e. maximum on 1 August, minium 1 Feb)
  report seasonal-mean-weight + sin ( ( day-of-year - 129 + random day-variation-range )
    * 360.0 / 365.25 ) * seasonal-weight-range / 2.0
end

to calc-fish
  ask patches [
    set prey-names (list "Sole" "Plaice" "Shrimp")
    set patch-prey-names (list "Sole" "Plaice" "Shrimp")
    set patch-prey-biomasses (list solea platessa crangon)
  ]
end

;to-report catch-species [haul-length]
  ; calculate the values for each patch and every target species
  ;(solea, platessa and crangon), i.e. biomass cath in kg

;  let ispecieslist n-values (number-of-gears) [igear -> position ([gear-species] of item igear boat-gears) prey-names ]

;  report n-values (number-of-gears) [ igear ->
;     (item igear catch-efficiency-boat) * (item (item igear ispecieslist) prey-biomasses)
;      * (([gear-width] of item igear boat-gears) * haul-length) * (boolean2int (item (item igear ispecieslist) prey-biomasses > 0) )
;  ]

;end

; This is a boat procedure
to-report should-go-fishing?
  ; if the weather is good and
  ; if this month's harvest is not sufficent
  ; a boat decides to start a fishing trip.

  set port-prob-bad-weather random-float 1.00
  if random-float 1.00 < port-prob-bad-weather [
    if boat-gains < 1.000 [ report true ]
  ]
  report false
end


to calc-accessibility
  setup-water-patches

  ask patches [set plaice-box? false]
  let _dataset load-dataset "Plaicebox"
  ask patches gis:intersecting _dataset [ set plaice-box? true ]

  ; Boats are not allowed within OWF areas
  update-owf
  ask patches with [owf-fraction > 0.5] [set accessible? false]

  ; Fishery is restricted in MPAs from 1 May 2023.  This needs to be refined
  ; TBB and OTB are not allowed in Borkum riffgrund
  ; TBB and OTB ar not allowed in Sylt west
  ; Small TBB are allowed in Sylt East
  if year > 2023 or (year = 2023 and month > 4) [
    ask patches gis:intersecting load-dataset "Natura2000" [ set accessible? false ]
  ]

  ; Fishery is excluded from national park from 1 Jan 2039 (hypothetical)
  if year > 2038  [
    ask patches gis:intersecting load-dataset "NP-SH" [ set accessible? false ]
    ask patches gis:intersecting load-dataset "NP-NS" [ set accessible? false ]
  ]
end


to setup-water-patches
  let depth-threshold -1

  ; By default, all patches are inaccessible
  ask patches [set accessible? false]

  ; Provide the SNS shape
  let _sns load-dataset "SNS"
  set water-patches patches gis:intersecting  _sns

  ; Creep-fill from maximum depth, assumed in the North Sea
  let my-patches max-one-of water-patches [depth]
  ask my-patches [set accessible? true]

  let new-patches nobody
  repeat max-pxcor * 2 [
    ask my-patches [
      set new-patches neighbors4 with [depth >= depth-threshold and not accessible?]
      ask new-patches [set accessible? true]
    ]
    set my-patches water-patches with [accessible? and (count neighbors4 with [accessible?]) < 4]
  ]

  ask patches with [not accessible?] [set depth min (list -2 depth)]
  set water-patches patches with [accessible?]

  ; Define a sponge layer around edge where we prevent boats to go
  let _sponge 3
  ask patches with [pxcor > max-pxcor - _sponge or pxcor < min-pxcor + _sponge or
    pycor > max-pycor - _sponge or pycor < min-pycor + _sponge] [set accessible? false]
end

; This observer procedure saves tabular data as a fleet average. It should be
; called by go each time step
; @todo expand to other gears, as this one
to save-totals
  let _boats boats with [boat-total-time-at-sea > 0 and ([gear-species] of item boat-current-gear-index boat-gears) =  "Shrimp"]
  let _count count _boats
  let _filename (word "results/total_avg_shrimp_" (time:get "year" start-date)
      "-"  (time:get "month" start-date) "-" (time:get "day" start-date) ".csv")

  if ticks = 0 [
    carefully [file-delete _filename][]
    file-open _filename
    file-print (word "# tick,year,month,day,doy,at-sea,fuel,landings,count")
    file-print (word "#     ,    ,     ,   ,   , d    , l  ,   kg   , ")
    file-close
  ]

  if any? _boats [
    file-open _filename
    file-print csv:to-row (list ticks
      (time:get "year" date)   (time:get "month" date) (time:get "day" date) (time:get "dayofyear" date)
      (sum [boat-total-time-at-sea ] of _boats / 365.25)
      (sum [boat-total-fuel] of _boats  )
      (sum [boat-total-landings] of _boats  )
      ;(sum [boat-total-fuel-consumption / boat-total-landings] of _boats / _count ) ; Fuel intensity
      ;(sum [boat-total-landings / boat-total-days-at-sea] of _boats / _count) ; LPUE
      _count
    )
    file-close
   ]
end

; The profile routine is called manually from the command line while we test
to profile
  let _n 5
  let _filename "results/profiler_data.csv"
  print (sentence "Started profiling for" _n "steps ..")
  ;setup
  profiler:start
  repeat _n [ go ]
  ;setup
  profiler:stop
  csv:to-file _filename profiler:data
  profiler:reset
  print (sentence ".. . saved profileing data in" _filename)
end

to license-message
  print "Viable North Sea"
  print ""
  print "Copyright 2022-2024 Helmholtz-Zentrum hereon GmbH"
  print "Copyright 2022-2023 Universität Hamburg"
  print "Copyright 2022-2023 Hochschule Bremerhaven"
  print ""
  print "Licensed under the Apache License, Version 2.0 (the 'License');"
  print "you may not use this file except in compliance with the License."
  print "You may obtain a copy of the License at"
  print "    http://www.apache.org/licenses/LICENSE-2.0"
  print ""
  print "Unless required by applicable law or agreed to in writing, software"
  print "distributed under the License is distributed on an 'AS IS' BASIS,"
  print "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
  print "See the License for the specific language governing permissions and"
  print "limitations under the License."
  print ""
end

to update-logbooks
  ask boats with [boat-is-learning? and count boat-actions = memory-size] [
    set boat-is-learning? false
    if is-turtle? boat-logbook [
      ask boat-logbook [
        set logbook-file-name (word "results/logbook_" [who] of myself ".txt")
        if file-exists? logbook-file-name [carefully [file-delete logbook-file-name][]]
      ]
      boat-logbook-header
    ]
  ]
end

; export the data occording to the global variable output-frequency
to export-data
  if output-frequency = "none" [ stop ]
  if output-frequency = "daily" [
    save-dynamic-datasets stop
  ]
  if output-frequency = "weekly" and (time:get "dayofweek"  date mod 7) = 0 [
    ; on Sundays
    save-dynamic-datasets stop
  ]
  if output-frequency = "monthly" and (time:get "day"  date) = 1 [
    ; on the first of the month
    save-dynamic-datasets stop
  ]
  if output-frequency = "yearly" and (time:get "dayofyear"  date) = 1 [
    ; on the first of the year
    save-dynamic-datasets stop
  ]
end
