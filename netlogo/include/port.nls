; SPDX-FileCopyrightText: 2022-2023 Universit√§t Hamburg
; SPDX-FileCopyrightText: 2022-2023 Helmholtz-Zentrum hereon GmbH
; SPDX-License-Identifier: CC-BY-4.0
; Author: Sascha Hokamp <sascha.hokamp@uni-hamburg.de>
; Author: Carsten Lemmen <carsten.lemmen@hereon.de>

extensions [ csv ]

globals [
;  test-list
]

breed [ ports port ]

ports-own [
;;,"fav_lan","t_intv_min","tot_euros","tot_kgs","LE_EURO_SOL","LE_EURO_CSH","LE_EURO_PLE","LE_KG_SOL","LE_KG_CSH","LE_KG_PLE","VE_REF","t_intv_day","t_intv_h","ISO3_Country_Code","full_name","Coordinates","Latitude","Longitude","EU_Fish_Port","Port"
  port-kind                     ; home-port (which includes also the landings as favorite port) or favorite-landing-port
  port-name                     ; Name of the Port 'full name' info from UN_LOCODE.csv
  port-country                  ; Name of the Country 'ISO3_Country_Code' info from UN_LOCODE.csv
  port-latitude                 ; Latitude of the Port 'Latitude'
  port-longitude                ; Longitude of the Port 'longitude'
  port-start-patch              ; starting patch for boats
  port-landing-patch            ; landing patch for boats

  port-fish-catch-kg            ; vektor of fish catches

  ;port-landings-euro            ; vector of landings with number-of-species in EURO 2015
  ;port-landings-kg              ; vector of landings with number-of-species in Kg
  port-prey-landed               ; vector of length prey-names that records the daily landing

  port-transportation-costs; average transportation costs as percentage of the total landings in EUR 2015
  port-operation-costs     ; average operating costs as percentage of the total landings in EUR 2015
  port-average-trip-length ; average trip length


  port-average-fishing-effort-in-days
  port-average-fishing-effort-in-hours   ; t_intv_h
  ;port-boat-number
  port-weather                  ; status of the weather "bad" -> stay in harbor, "good" -> maybe leave harbor
  port-prob-bad-weather         ; probability that the weather is too bad to leave harbor

  port-prey-names ; list of species that are landed here
  port-clusters
]


to setup-ports
  port-read
  set home-ports ports with [ port-kind = "favorite"]
end

; sub_grp,fav_lan,n_vessels,X,ISO3_Country_Code,full_name,Coordinates,Latitude,Longitude,EU_Fish_Port,Port,Region
to port-read

  carefully [file-close][]
  file-open "../data/orey_etal_data/musselabm-harbor_vessel.csv"  ; Data of German fleet per landing port and cluster
  gis:load-coordinate-system "../data/wgs1984.prj"

  ; Read the first line and skip until not commented with '#'
  let _row csv:from-row file-read-line
  while [ starts-with _row "#" ][ set _row csv:from-row file-read-line ]
  let header-row _row print header-row

  set-default-shape ports "house"

  while [ not file-at-end? ] [
    set _row csv:from-row file-read-line print _row

    if  (item (position "Longitude" header-row) _row)  < 9.16 [
      ; In rows 7,8 there are decimal coordinates
      let xy gis:project-lat-lon (item (position "Latitude" header-row) _row) (item (position "Longitude" header-row) _row)

      ; Create ports only if on current map (list is not empty) and not Baltic (lon > 9.16) and not already created.
      ; if created, add those boats to the port
      if not (length xy = 0) [
        let _port-name item (position "full_name" header-row) _row

        if not any? ports with [port-name = _port-name ][
          create-ports 1 [
            set port-kind "favorite"
            set port-name _port-name
            set port-country item (position "ISO3_Country_Code" header-row) _row
            set port-latitude item (position "Latitude" header-row) _row
            set port-longitude item (position "Longitude" header-row) _row

            set size 4
            set label port-name
            set label-color black
            setxy (item 0 xy)  (item 1 xy)
            set port-start-patch min-one-of patches with [depth > navigable-depth and distance myself > 2 and accessible?] [distance myself]
            set port-landing-patch port-start-patch
            set port-clusters (list 0 0 0 0)
            print (sentence "Created" port-kind "port" port-name)


            set port-prey-names (list "Crangon" "Pleuronectes" "Solea")

          ]; find a starting patch at least 3 nm from port away
        ]
        ask ports with [port-name = _port-name ][
            print port-clusters
            set port-clusters replace-item ((item (position "sub_grp" header-row) _row) - 1 ) port-clusters (item (position "n_vessels" header-row) _row)
        ]
      ]
    ]
  ]
  file-close

end
