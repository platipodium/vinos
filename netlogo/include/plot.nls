; SPDX-FileCopyrightText: 2022 Universität Hamburg
; SPDX-FileCopyrightText: 2022-2023 Helmholtz-Zentrum hereon GmbH
; SPDX-License-Identifier: Apache-2.0
; SPDX-FileContributor: Sascha Hokamp <sascha.hokamp@uni-hamburg.de>
; SPDX-FileContributor: Carsten Lemmen <carsten.lemmen@hereon.de>

to plot-setup-catch-by-gear
  set-current-plot "catch"
  set-plot-background-color white

  foreach range length gear-names [ [i] ->
    let pen-name  item i gear-names
    if not plot-pen-exists?  pen-name [ create-temporary-plot-pen pen-name ]
    set-current-plot-pen pen-name
    ifelse i != 4 [ set-plot-pen-color 125 - 20 * i ][set-plot-pen-color 45 ]
    set-plot-pen-interval 1
    auto-plot-on
    set-plot-pen-mode 0 ; line
  ]
end

to plot-update-catch-by-gear
  set-current-plot "catch"
  foreach range length gear-names [[i] ->
    let pen-name  item i gear-names
    set-current-plot-pen pen-name
    plotxy ticks mean [item i boat-trip-gear-catches] of boats
  ]
end

to plot-setup-gain-by-gear
  set-current-plot "gain-by-gear"
  set-plot-background-color white

  foreach range length gear-names [ [i] ->
    let pen-name  item i gear-names
    if not plot-pen-exists?  pen-name [ create-temporary-plot-pen pen-name ]
    set-current-plot-pen pen-name
    ifelse i != 4
     [ set-plot-pen-color 125 - 20 * i]
    [set-plot-pen-color 45 ]; @todo make the colors a property of gears, not numbers here
    set-plot-pen-interval 1
    auto-plot-on
    set-plot-pen-mode 0 ; line
  ]

  let pen-name "zero"
  if not plot-pen-exists?  pen-name [ create-temporary-plot-pen pen-name ]
  set-current-plot-pen pen-name
  set-plot-pen-color grey
  set-plot-pen-mode 0
end

to plot-update-gain-by-gear
  set-current-plot "gain-by-gear"
  set-current-plot-pen "zero"
  plotxy ticks 0
  ; foreach prey-names [0 1 2] [[s i] ->
  foreach range length gear-names [[i] ->
    let pen-name  item i gear-names
    set-current-plot-pen pen-name
    ;set-plot-x-range 0 max
    plotxy ticks sum [item i boat-gains] of boats
  ]
end

to plot-setup-catch-by-trip
  set-current-plot "catch-by-trip"
  auto-plot-on
  set-histogram-num-bars 9
  let pen-name "hist"
  if not plot-pen-exists? pen-name [ create-temporary-plot-pen pen-name ]
end


to plot-update-catch-by-trip
  set-current-plot "catch-by-trip"
  let pen-name "hist"
  set-current-plot-pen pen-name
  set-plot-pen-mode 1 ; box
  histogram [wage] of boats
end

to plot-setup-priority-by-gear
  set-current-plot "priority-by-gear"
  set-plot-background-color white

  foreach range number-of-gears [ [i] ->
    let pen-name  item i gear-names
    if not plot-pen-exists?  pen-name [ create-temporary-plot-pen pen-name ]
    set-current-plot-pen pen-name
    ifelse i != 4
    [ set-plot-pen-color 135 - 20 * i]
    [set-plot-pen-color 45 ]
    auto-plot-on
    set-plot-x-range 0 1
    set-histogram-num-bars 9
    set-plot-pen-mode 1 ; box
  ]
end

to plot-update-priority-by-gear
  set-current-plot "priority-by-gear"
   foreach range number-of-gears [[i] ->
    let pen-name  item i gear-names
    set-current-plot-pen pen-name
    histogram [item i boat-gear-priorities] of boats ;@todo maybe manage to show the distribution of the highest priorities
   ; for the boats instead of the distribution of the priority for all gears (e.g. max-one-of boat-gear-priotities
  ]
end

to plot-setup-boat-property
  set-current-plot "boat-property"
  set-plot-background-color white
  auto-plot-on
end

to plot-update-boat-property
  set-current-plot "boat-property"
  if not plot-pen-exists? boat-property-chooser [
    clear-plot
    create-temporary-plot-pen boat-property-chooser
    set-plot-pen-mode 1 ; box
  ]
  let _x-range (list 0 1)
  set-current-plot-pen boat-property-chooser
  let _values [ boat-max-duration] of boats

  ; For categorical values, do not adjust the x-range automatically but choose according
  ; to number of categories
  ifelse (boat-property-chooser =  "trip-phase" ) or (boat-property-chooser =  "type" )
  or (boat-property-chooser =  "prey" ) or (boat-property-chooser =  "gear" ) [
    if (boat-property-chooser = "trip-phase") [
      set _values [ boat-trip-phase] of boats
      set-histogram-num-bars 6
      set _x-range (list -.5 5.5)
    ]
    if (boat-property-chooser = "type") [
      set _values [ boat-type] of boats
      set-histogram-num-bars 4
      set _x-range (list -.5 3.5)
    ]
    if (boat-property-chooser = "prey") [
      let _categories [ boat-prey] of boats
      set _values map [ i -> position i prey-names] _categories
      set-histogram-num-bars length prey-names
      set _x-range (list -.5 (length prey-names - 0.5))
    ]
    if (boat-property-chooser = "gear") [
      let _categories [ boat-gear] of boats
      set _values map [ i -> position i gear-names] _categories
      set-histogram-num-bars length gear-names
      set _x-range (list -.5 (length gear-names - 0.5))
    ]
  ][
    ; for numerical values, adjust x-range automatically
    if ( boat-property-chooser =  "max-duration" ) [ set _values [ round boat-max-duration] of boats ]
    if ( boat-property-chooser =  "max-distance" ) [ set _values [ round boat-max-distance] of boats ]
    if ( boat-property-chooser =  "time-at-sea" ) [ set _values [ round boat-time-at-sea] of boats ]
    if ( boat-property-chooser =  "time-at-sea-left" ) [ set _values [ round boat-time-at-sea-left] of boats ]
    if ( boat-property-chooser =  "distance-at-sea" ) [ set _values [ round boat-distance-at-sea] of boats ]
    if ( boat-property-chooser =  "length" ) [ set _values [ round boat-length] of boats ]
    if ( boat-property-chooser =  "capacity" ) [ set _values [ round boat-capacity] of boats ]
    if ( boat-property-chooser =  "catch-efficiency" ) [ set _values [ catch-efficiency-boat] of boats ]
    if ( boat-property-chooser =  "engine" ) [ set _values [ round boat-engine] of boats ]
    if ( boat-property-chooser =  "steaming-speed" ) [ set _values [ precision 1 boat-steaming-speed] of boats ]
    if ( boat-property-chooser =  "transportation-costs" ) [ set _values [ round boat-transportation-costs] of boats ]
    if ( boat-property-chooser =  "operating-costs" ) [ set _values [ round boat-operating-costs] of boats ]
    if ( boat-property-chooser =  "type" ) [ set _values [ round boat-type] of boats ]
    if ( boat-property-chooser =  "boat-total-days-at-sea" ) [ set _values [ round boat-total-days-at-sea] of boats ]
    if ( boat-property-chooser =  "boat-total-fuel-consumption" ) [ set _values [ round boat-total-fuel-consumption] of boats ]
    if ( boat-property-chooser =  "boat-total-landings" ) [ set _values [ round boat-total-landings] of boats ]

    set-histogram-num-bars 9
    set _x-range (list (min _values) (max _values))
  ]
  if (item 0 _x-range) = (item 1 _x-range) [set _x-range replace-item 1 _x-range (item 1 _x-range + 1)]
  set-plot-x-range item 0 _x-range item 1 _x-range
  histogram _values

end

to plot-setup-action-histogram
  set-current-plot "action"
  set-plot-background-color white
  auto-plot-on
end


to plot-update-action-histogram
  let _days days-in-past-year
  set-current-plot "action"
  if not plot-pen-exists? action-chooser [
    clear-plot
    create-temporary-plot-pen action-chooser
    set-plot-pen-mode 1 ; box
  ]
  let _x-range (list 0 1)
  set-current-plot-pen action-chooser

  if any? actions [
    let _values [ action-gain ] of actions

    ; For categorical values, do not adjust the x-range automatically but choose according
    ; to number of categories
    ifelse ( action-chooser =  "gear" ) [
      if (action-chooser = "gear") [
        let _categories [ action-gear ] of actions
        set _values map [ i -> position i gear-names] _categories
        set-histogram-num-bars length gear-names
        set _x-range (list -.5 (length gear-names - 0.5))
      ]
    ][
      ; for numerical values, adjust x-range automatically
      if ( action-chooser =  "gain" ) [ set _values [ round action-gain] of actions ]
      if ( action-chooser =  "catch" ) [ set _values [ round action-catch] of actions ]
      if ( action-chooser =  "coast" ) [ set _values [ round [distance-to-coast] of patch-here] of actions ]
      if ( action-chooser =  "depth" ) [ set _values [ round [depth] of patch-here] of actions ]
      if ( action-chooser =  "Effort h" ) [ set _values [ round sum [patch-monthly-effort-hours] of patch-here] of actions ]
      if ( action-chooser =  "Effort MWh" ) [ set _values [ round sum [patch-monthly-effort-mwatthours] of patch-here] of actions ]
      if ( action-chooser =  "SAR" ) [ set _values [ round sum [patch-monthly-swept-area] of patch-here] of actions ]
      if ( action-chooser =  "age" ) [ set _values [ action-age ] of actions ]

      set-histogram-num-bars 9
      set _x-range (list (min _values) (max _values))
    ]
    if (item 0 _x-range) = (item 1 _x-range) [set _x-range replace-item 1 _x-range (item 1 _x-range + 1)]
    set-plot-x-range item 0 _x-range item 1 _x-range
    histogram _values
  ]

end

to plot-setup-month-histogram
  set-current-plot "Monthly statistics"
  clear-plot
  set-plot-background-color white
  set-plot-x-range 0.4 12.6
  auto-plot-off
end

to plot-update-month-histogram
  let _imonth time:get "month" date - 1
  let _value n-values 12 [ i -> 0 ]
  set-current-plot "Monthly statistics"
  if not plot-pen-exists? monthly-chooser [
    clear-plot
    create-temporary-plot-pen monthly-chooser
    set-plot-pen-mode 1 ; box
  ]
  set-current-plot-pen monthly-chooser
  if (monthly-chooser = "Landing t")  [ set _value map [ i -> i / 1000 ] fleet-monthly-landing ]
  if (monthly-chooser = "Revenue k€") [ set _value map [ i -> i / 1000 ] fleet-monthly-revenue ]
  if (monthly-chooser = "Effort h")   [ set _value n-values 12 [ i -> sum [item i patch-monthly-effort-hours * area] of water-patches ]]
  if (monthly-chooser = "Effort MWh") [ set _value n-values 12 [ i -> sum [item i patch-monthly-effort-mwatthours * area] of water-patches ]]
  plot-pen-reset
  set-plot-y-range 0 ceiling (max _value / 10) * 10
  foreach range 12 [ _m ->
    ifelse ( _m = _imonth) [set-plot-pen-color red][set-plot-pen-color black]
    plotxy (_m + .5) item _m _value
  ]
end

to update-drawings
  clear-drawing
  ask ports   [set hidden? not show-ports?]
  ask boats   [set hidden? not show-boats?]
  ask actions   [set hidden? true]
  if owf? [ show-windfarms]
  if sar? [ draw-background "SAR" ]
  if box? [ load-plaice-box]
  setup-logo
  display
end
